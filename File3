Here is the updated code for TypeScript:
```
// App.tsx
import React, { useState } from 'react';
import BasicDetails from './BasicDetails';
import EducationDetails from './EducationDetails';
import Preferences from './Preferences';

interface FormData {
  basicDetails: {
    name: string;
    email: string;
  };
  educationDetails: {
    degree: string;
    university: string;
  };
  preferences: {
    interests: string;
  };
}

const App = () => {
  const [formData, setFormData] = useState<FormData>({
    basicDetails: {},
    educationDetails: {},
    preferences: {},
  });

  const handleNext = (data: FormData) => {
    setFormData((prevData) => ({ ...prevData, ...data }));
  };

  const handleBack = () => {
    // implement logic to go back to previous step
  };

  const handleSubmit = () => {
    const formData = {
      basicDetails: formData.basicDetails,
      educationDetails: formData.educationDetails,
      preferences: formData.preferences,
    };
    // submit form data to server or store it in local storage
  };

  return (
    <div>
      {currentStep === 1 && (
        <BasicDetails
          formData={formData.basicDetails}
          handleNext={handleNext}
          handleBack={handleBack}
        />
      )}
      {currentStep === 2 && (
        <EducationDetails
          formData={formData.educationDetails}
          handleNext={handleNext}
          handleBack={handleBack}
        />
      )}
      {currentStep === 3 && (
        <Preferences
          formData={formData.preferences}
          handleNext={handleNext}
          handleBack={handleBack}
        />
      )}
      <button type="submit" onClick={handleSubmit}>Submit</button>
    </div>
  );
};

export default App;
```
In this code, I've added type annotations for the `formData` state and the `handleNext` and `handleBack` functions. I've also added an interface `FormData` to define the shape of the form data.

Note that I've assumed that the `basicDetails`, `educationDetails`, and `preferences` objects have the same shape as the `FormData` interface. If this is not the case, you may need to modify the interface accordingly.

Also, I've added a `handleSubmit` function that collects the form data from each step and submits it to the server or stores it in local storage. This function is called when the user clicks the submit button.

I hope this helps! Let me know if you have any further questions.
