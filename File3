import * as React from "react";
import { useForm, SubmitHandler, Controller } from "react-hook-form";
import { useState, useEffect } from "react";
import Grid from "@mui/material/Grid";
import Typography from "@mui/material/Typography";
import TextField from "@mui/material/TextField";
import Box from "@mui/material/Box";
import Paper from "@mui/material/Paper";
import InputLabel from "@mui/material/InputLabel";
import MenuItem from "@mui/material/MenuItem";
import FormControl from "@mui/material/FormControl";
import Select from "@mui/material/Select";
import Button from "@mui/material/Button";
import { formdata } from "../services/interfaces";
import { Country, State, City } from 'country-state-city';
import { IState, ICity } from 'country-state-city'

interface BasicProps {
  onNext: (data: formdata) => void;
  initialValues: formdata;
}

const Step1: React.FC<BasicProps> = ({ onNext, initialValues }) => {
  const [cityarr, setCityarr] = useState<ICity[]>();
  const { register, handleSubmit, getValues, control, reset, formState: { errors } } = useForm<formdata>({
    defaultValues: initialValues,
  });
  const statearray = State.getStatesOfCountry('IN');

  const setcity = (id: string) => {
    const getcities = City.getCitiesOfState('IN', id);
    setCityarr(getcities)
  }

  useEffect(() => {
    if (initialValues.state) {
      const code: string = statearray.find((state) => state.name === initialValues.state)?.isoCode as string;
      setcity(code)
    }
  }, [initialValues, reset]);


  useEffect(() => {
    reset(initialValues);
    // Reset the form with initial values
  }, [initialValues, reset]);

  const todayDate = new Date().toISOString().split("T")[0];
  const onSubmit: SubmitHandler<formdata> = data => {
    onNext(data);
  };
  return (
    <React.Fragment>
      <Paper elevation={3} sx={{ marginRight: "15%", marginLeft: "15%" }}>
        <Box component="form" onSubmit={handleSubmit(onSubmit)} sx={{ padding: 5 }}>
          <Typography variant="h6" gutterBottom sx={{ paddingBottom: 5 }}>
            BASIC DETAILS
          </Typography>
          <Grid container spacing={3}>
            <Grid item xs={12} sm={2}>
              <InputLabel
                sx={{
                  display: "flex",
                  justifyContent: "center",
                  fontWeight: 700
                }}
              >
                First Name
              </InputLabel>
            </Grid>
            <Grid item xs={12} sm={4}>
              <Controller
                control={control}
                name="fname"
                rules={{ required: "First name is required", pattern: { value: /^[a-zA-Z]+$/, message: "Invalid input" } }}
                render={({ field }) => {
                  return (
                    <TextField
                      {...field}
                      fullWidth
                      sx={{ maxWidth: 600 }}
                      label="First Name"
                      margin="dense"
                      error={!!errors.fname}
                      helperText={errors.fname ? errors.fname.message : null}
                      InputLabelProps={{ shrink: !!field.value }}
                    />
                  )
                }}
              />
            </Grid>
            <Grid item xs={12} sm={2}>
              <InputLabel
                sx={{
                  display: "flex",
                  justifyContent: "center",
                  fontWeight: 700
                }}
              >
                Last Name
              </InputLabel>
            </Grid>
            <Grid item xs={12} sm={4}>
              <Controller
                control={control}
                name="lname"
                rules={{ required: "Last name is required", pattern: { value: /^[a-zA-Z]+$/, message: "Invalid input" } }}
                render={({ field }) => (
                  <TextField
                    {...field}
                    fullWidth
                    sx={{ maxWidth: 600 }}
                    label="Last Name"
                    margin="dense"
                    error={!!errors.lname}
                    helperText={errors.lname ? errors.lname.message : null}
                    InputLabelProps={{ shrink: !!field.value }}
                  />
                )}
              />
            </Grid>
            <Grid item xs={12} sm={2}>
              <InputLabel
                sx={{
                  display: "flex",
                  justifyContent: "center",
                  fontWeight: 700
                }}
              >
                Designation
              </InputLabel>
            </Grid>
            <Grid item xs={12} sm={4}>
              <FormControl fullWidth size="small">
                <Controller
                  control={control}
                  name="designation"
                  rules={{ required: "Designation is required", pattern: { value: /^[a-zA-Z]+$/, message: "Invalid input" } }}
                  render={({ field }) => (
                    <TextField
                      {...field}
                      id="Designation"
                      label="Designation"
                      error={!!errors.designation}
                      helperText={errors.designation ? errors.designation.message : null}
                      InputLabelProps={{ shrink: !!field.value }}
                    />
                  )}
                />
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={2} />
            <Grid item xs={12} sm={4} />
            <Grid item xs={12} sm={2}>
              <InputLabel
                sx={{
                  display: "flex",
                  justifyContent: "center",
                  fontWeight: 700
                }}
              >
                Address 1
              </InputLabel>
            </Grid>
            <Grid item xs={12} sm={4}>
              <FormControl fullWidth size="small">
                <Controller
                  control={control}
                  name="add1"
                  rules={{ required: "Address 1 is required" }}
                  render={({ field }) => (
                    <TextField
                      {...field}
                      id="add1"
                      label="plot no:123,down street,..."
                      error={!!errors.add1}
                      helperText={errors.add1 ? errors.add1.message : null}
                      InputLabelProps={{ shrink: !!field.value }}
                    />
                  )}
                />
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={2}>
              <InputLabel
                sx={{
                  display: "flex",
                  justifyContent: "center",
                  fontWeight: 700
                }}
              >
                Address 2
              </InputLabel>
            </Grid>
            <Grid item xs={12} sm={4}>
              <Controller
                control={control}
                name="add2"
                rules={{ required: "Address 2 is required" }}
                render={({ field }) => (
                  <TextField
                    {...field}
                    id="add2"
                    label="plot no:567,war street,..."
                    fullWidth
                    error={!!errors.add2}
                    helperText={errors.add2 ? errors.add2.message : null}
                    InputLabelProps={{ shrink: !!field.value }}
                  />
                )}
              />
            </Grid>
            {/*--------------------------mail phno --------------------------- */}
            <Grid item xs={12} sm={2}>
              <InputLabel
                sx={{
                  display: "flex",
                  justifyContent: "center",
                  fontWeight: 700
                }}
              >
                Email
              </InputLabel>
            </Grid>
            <Grid item xs={12} sm={4}>
              <FormControl fullWidth size="small">
                <Controller
                  control={control}
                  name="email"
                  rules={{ required: "Email is required", pattern: { value: /^\S+@\S+\.\S+$/, message: "Enter a valid email address" } }}
                  render={({ field }) => (
                    <TextField
