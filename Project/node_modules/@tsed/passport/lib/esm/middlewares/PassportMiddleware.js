var PassportMiddleware_1;
import { __decorate, __metadata, __param } from "tslib";
import { Inject } from "@tsed/di";
import { Middleware } from "@tsed/platform-middlewares";
import { Context } from "@tsed/common";
import { ProtocolsService } from "../services/ProtocolsService.js";
import { getProtocolsFromRequest } from "../utils/getProtocolsFromRequest.js";
let PassportMiddleware = PassportMiddleware_1 = class PassportMiddleware {
    protocolsService;
    shouldSkip(ctx) {
        const request = ctx.getRequest();
        return request.user && request.isAuthenticated();
    }
    async use(ctx) {
        const endpoint = ctx.endpoint;
        const request = ctx.getRequest();
        if (this.shouldSkip(ctx)) {
            return;
        }
        const { options, protocol, method, originalUrl = true } = endpoint.store.get(PassportMiddleware_1);
        const protocols = getProtocolsFromRequest(request, protocol, this.protocolsService.getProtocolsNames());
        if (originalUrl) {
            request.url = request.originalUrl;
        }
        await (method === "authenticate"
            ? this.protocolsService.authenticate(protocols, options, ctx)
            : this.protocolsService.authorize(protocols, options, ctx));
    }
};
__decorate([
    Inject(ProtocolsService),
    __metadata("design:type", ProtocolsService)
], PassportMiddleware.prototype, "protocolsService", void 0);
__decorate([
    __param(0, Context()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], PassportMiddleware.prototype, "use", null);
PassportMiddleware = PassportMiddleware_1 = __decorate([
    Middleware()
], PassportMiddleware);
export { PassportMiddleware };
//# sourceMappingURL=PassportMiddleware.js.map