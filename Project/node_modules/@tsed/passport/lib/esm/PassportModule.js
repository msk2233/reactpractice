import { __decorate, __metadata } from "tslib";
import { Constant, Inject, Module, PlatformApplication, ProviderScope, Logger } from "@tsed/common";
import Passport from "passport";
import { PassportSerializerService } from "./services/PassportSerializerService.js";
import { ProtocolsService } from "./services/ProtocolsService.js";
/**
 * @ignore
 */
let PassportModule = class PassportModule {
    app;
    protocolsService;
    passportSerializer;
    userProperty;
    pauseStream;
    disableSession;
    platformName;
    logger;
    constructor(app, protocolsService, passportSerializer) {
        this.app = app;
        this.protocolsService = protocolsService;
        this.passportSerializer = passportSerializer;
    }
    async $onInit() {
        Passport.serializeUser(this.passportSerializer.serialize.bind(this.passportSerializer));
        Passport.deserializeUser(this.passportSerializer.deserialize.bind(this.passportSerializer));
        const promises = this.protocolsService.getProtocols().map((provider) => this.protocolsService.invoke(provider));
        await Promise.all(promises);
        return undefined;
    }
    $beforeRoutesInit() {
        const { userProperty, pauseStream } = this;
        switch (this.platformName) {
            case "express":
                this.app.use(Passport.initialize({ userProperty }));
                !this.disableSession && this.app.use(Passport.session({ pauseStream }));
                return;
            default:
                this.logger.warn(`Platform "${this.platformName}" not supported by @tsed/passport`);
        }
    }
};
__decorate([
    Constant("passport.userProperty"),
    __metadata("design:type", String)
], PassportModule.prototype, "userProperty", void 0);
__decorate([
    Constant("passport.pauseStream"),
    __metadata("design:type", Boolean)
], PassportModule.prototype, "pauseStream", void 0);
__decorate([
    Constant("passport.disableSession", false),
    __metadata("design:type", Boolean)
], PassportModule.prototype, "disableSession", void 0);
__decorate([
    Constant("PLATFORM_NAME"),
    __metadata("design:type", String)
], PassportModule.prototype, "platformName", void 0);
__decorate([
    Inject(),
    __metadata("design:type", Logger)
], PassportModule.prototype, "logger", void 0);
PassportModule = __decorate([
    Module({
        scope: ProviderScope.SINGLETON
    }),
    __metadata("design:paramtypes", [PlatformApplication,
        ProtocolsService,
        PassportSerializerService])
], PassportModule);
export { PassportModule };
//# sourceMappingURL=PassportModule.js.map