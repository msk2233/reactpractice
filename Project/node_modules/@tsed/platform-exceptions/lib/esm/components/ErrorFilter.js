import { __decorate } from "tslib";
import { Env } from "@tsed/core";
import { Catch } from "../decorators/catch.js";
let ErrorFilter = class ErrorFilter {
    catch(error, ctx) {
        const { response, logger, env } = ctx;
        const err = this.mapError(error, env);
        response
            .setHeaders(this.getHeaders(error))
            .status(err.status)
            .contentType("application/json")
            .body(env === Env.PROD ? "InternalServerError" : err);
    }
    mapError(error, env) {
        return {
            name: error.origin?.name || error.name || error.code,
            message: error.message,
            status: error.status || error.statusCode || 500,
            errors: this.getErrors(error),
            stack: env === Env.DEV ? error.stack : undefined
        };
    }
    getErrors(error) {
        return [error, error.origin].filter(Boolean).reduce((errs, { errors }) => {
            return errs.concat(errors).filter(Boolean);
        }, []);
    }
    getHeaders(error) {
        return [error, error.origin].filter(Boolean).reduce((obj, { headers }) => {
            return {
                ...obj,
                ...(headers || {})
            };
        }, {});
    }
};
ErrorFilter = __decorate([
    Catch(Error)
], ErrorFilter);
export { ErrorFilter };
//# sourceMappingURL=ErrorFilter.js.map