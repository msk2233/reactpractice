import { __decorate, __metadata } from "tslib";
import { ancestorsOf, classOf, nameOf } from "@tsed/core";
import { Inject, Injectable, InjectorService } from "@tsed/di";
import { ErrorFilter } from "../components/ErrorFilter.js";
import { ExceptionFilter } from "../components/ExceptionFilter.js";
import { MongooseErrorFilter } from "../components/MongooseErrorFilter.js";
import { StringErrorFilter } from "../components/StringErrorFilter.js";
import { ExceptionFiltersContainer } from "../domain/ExceptionFiltersContainer.js";
import { ResourceNotFound } from "../errors/ResourceNotFound.js";
/**
 * Catch all errors and return the json error with the right status code when it's possible.
 *
 * @platform
 */
let PlatformExceptions = class PlatformExceptions {
    types = new Map();
    injector;
    $onInit() {
        ExceptionFiltersContainer.forEach((token, type) => {
            this.types.set(type, this.injector.get(token));
        });
    }
    catch(error, ctx) {
        const name = nameOf(classOf(error));
        if (name && this.types.has(name)) {
            return this.types.get(name).catch(error, ctx);
        }
        const target = ancestorsOf(error)
            .reverse()
            .find((target) => this.types.has(target));
        if (target) {
            return this.types.get(target).catch(error, ctx);
        }
        // default
        return this.types.get(Error).catch(error, ctx);
    }
    resourceNotFound(ctx) {
        return this.catch(new ResourceNotFound(ctx.request.url), ctx);
    }
};
__decorate([
    Inject(),
    __metadata("design:type", InjectorService)
], PlatformExceptions.prototype, "injector", void 0);
PlatformExceptions = __decorate([
    Injectable({
        imports: [ErrorFilter, ExceptionFilter, MongooseErrorFilter, StringErrorFilter]
    })
], PlatformExceptions);
export { PlatformExceptions };
//# sourceMappingURL=PlatformExceptions.js.map