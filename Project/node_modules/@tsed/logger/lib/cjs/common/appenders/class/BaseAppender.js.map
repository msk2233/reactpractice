{"version":3,"file":"BaseAppender.js","sourceRoot":"","sources":["../../../../../src/common/appenders/class/BaseAppender.ts"],"names":[],"mappings":";;;AACA,yDAAoD;AAkBpD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,MAAsB,YAAY;IAKJ;IAJ5B,OAAO,CAAM;IAIb,YAA4B,MAAmC;QAAnC,WAAM,GAAN,MAAM,CAA6B;QAC7D,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACzB,CAAC;IAED,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,gBAAgB,CAAC;IACrD,CAAC;IAED,SAAS,CAAC,MAAoC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAEnC,IAAI,CAAC,OAAO,GAAG,iBAAO,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,aAAa,IAAI,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAE1F,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YACvB,IAAI,CAAC,OAAO,GAAG,iBAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC1E,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,GAAG,IAAW;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,CAAC;IACzC,CAAC;CAGF;AAlCD,oCAkCC","sourcesContent":["import {LogEvent} from \"../../core/LogEvent\";\nimport {Layouts} from \"../../layouts/class/Layouts\";\nimport {AppenderConfiguration, PartialAppenderConfiguration} from \"../interfaces/AppenderConfiguration\";\n\nexport interface AppenderOptions {\n  name: string;\n  defaultLayout?: string;\n}\n\nexport interface BaseAppenderMethods {\n  write(loggingEvent: LogEvent): any;\n\n  build?(): any;\n\n  reopen?(): any;\n\n  shutdown?(): Promise<any> | any | void;\n}\n\n/**\n * ## BaseAppender\n *\n * `@tsed/logger` can load appenders from outside the core appenders. The type config value is used as a require path if no matching appender can be found. For example, the following configuration will create an appender with decorators:\n *\n * ```typescript\n * // consoleAppender.ts\n * import {Appender, BaseAppender, LogEvent} from \"@tsed/logger\";\n * const consoleLog = console.log.bind(console);\n *\n * @ Appender({name: \"console2\"})\n * export class ConsoleAppender extends BaseAppender {\n *   write(loggingEvent: LogEvent) {\n *       consoleLog(this.layout(loggingEvent, this.config.timezoneOffset));\n *   }\n * }\n * ```\n *\n * This appender can be use like this:\n *\n * ```typescript\n * import {Logger} from \"@tsed/logger\";\n * import \"./consoleAppender.ts\"\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders\n *   .set(\"console-log\", {\n *       type: \"console2\", level: [\"debug\", \"info\", \"trace\"]\n *   });\n * ```\n *\n */\nexport abstract class BaseAppender<Opts = any> implements BaseAppenderMethods {\n  #layout: any;\n\n  [key: string]: any;\n\n  constructor(public readonly config: AppenderConfiguration<Opts>) {\n    this.configure(config);\n  }\n\n  get appenderOptions(): AppenderOptions {\n    return this.__proto__.constructor.$appenderOptions;\n  }\n\n  configure(config: PartialAppenderConfiguration) {\n    Object.assign(this.config, config);\n\n    this.#layout = Layouts.get(this.appenderOptions?.defaultLayout || \"colored\", this.config);\n\n    if (this.config.layout) {\n      this.#layout = Layouts.get(this.config.layout.type, this.config.layout);\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * @param args\n   */\n  layout(...args: any[]): string {\n    return this.#layout.transform(...args);\n  }\n\n  abstract write(loggingEvent: LogEvent): any;\n}\n"]}