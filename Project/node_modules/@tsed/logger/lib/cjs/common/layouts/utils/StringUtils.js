"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.format = exports.truncateAndPad = exports.pad = exports.truncate = void 0;
function truncate(truncation, toTruncate) {
    let len;
    if (truncation) {
        len = parseInt(truncation.substr(1), 10);
        return toTruncate.substring(0, len);
    }
    return toTruncate;
}
exports.truncate = truncate;
function pad(padding, toPad) {
    let len;
    if (padding) {
        if (padding.charAt(0) === "-") {
            len = parseInt(padding.substr(1), 10);
            // Right pad with spaces
            while (toPad.length < len) {
                toPad += " ";
            }
        }
        else {
            len = parseInt(padding, 10);
            // Left pad with spaces
            while (toPad.length < len) {
                toPad = ` ${toPad}`;
            }
        }
    }
    return toPad;
}
exports.pad = pad;
function truncateAndPad(toTruncAndPad, truncation, padding) {
    let replacement = toTruncAndPad;
    replacement = truncate(truncation, replacement);
    replacement = pad(padding, replacement);
    return replacement;
}
exports.truncateAndPad = truncateAndPad;
function format(fmt, ...args) {
    const re = /(%?)(%([ojds]))/g;
    if (args.length) {
        const replacer = (match, escaped, ptn, flag) => {
            let arg = args.shift();
            switch (flag) {
                case "o":
                    if (Array.isArray(arg)) {
                        arg = JSON.stringify(arg);
                        break;
                    }
                case "s":
                    arg = "" + arg;
                    break;
                case "d":
                    arg = Number(arg);
                    break;
                case "j":
                    arg = JSON.stringify(arg);
                    break;
            }
            if (!escaped) {
                return arg;
            }
            args.unshift(arg);
            return match;
        };
        fmt = String(fmt).replace(re, replacer);
    }
    // arguments remain after formatting
    if (args.length) {
        fmt += " " + args.join(" ");
    }
    // update escaped %% values
    fmt = String(fmt).replace(/%{2,2}/g, "%");
    return "" + fmt;
}
exports.format = format;
//# sourceMappingURL=StringUtils.js.map