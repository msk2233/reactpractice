{"version":3,"file":"LayoutReplacer.js","sourceRoot":"","sources":["../../../../../src/common/layouts/class/LayoutReplacer.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-ignore\nimport * as dateFormat from \"date-format\";\nimport {LogEvent} from \"../../core/LogEvent\";\nimport {LOG_COLORS} from \"../constants/logColors\";\nimport {colorizeEnd, colorizeStart} from \"../utils/colorizeUtils\";\nimport {IReplacers} from \"../interfaces/Replacers\";\nimport {TokensHandlers} from \"../interfaces/BasicLayoutConfiguration\";\nimport {format} from \"../utils/StringUtils\";\n\nexport class LayoutReplacer {\n  static EOL = \"\\n\";\n  static HOSTNAME = \"\";\n  static formatter = format;\n\n  constructor(\n    private tokens: TokensHandlers,\n    private timezoneOffset: number\n  ) {}\n\n  /**\n   *\n   * @param loggingEvent\n   * @param specifier\n   * @returns {any}\n   */\n  public categoryName = (loggingEvent: LogEvent, specifier: string): string => {\n    let loggerName = loggingEvent.categoryName;\n    if (specifier) {\n      const precision = parseInt(specifier, 10);\n      const loggerNameBits = loggerName.split(\".\");\n      if (precision < loggerNameBits.length) {\n        loggerName = loggerNameBits.slice(loggerNameBits.length - precision).join(\".\");\n      }\n    }\n    return loggerName;\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @param specifier\n   * @returns {any}\n   */\n  public formatAsDate = (loggingEvent: LogEvent, specifier: string): string => {\n    let format = dateFormat.ISO8601_FORMAT;\n    if (specifier) {\n      format = specifier;\n      // Pick up special cases\n      if (format === \"ISO8601\") {\n        format = dateFormat.ISO8601_FORMAT;\n      } else if (format === \"ISO8601_WITH_TZ_OFFSET\") {\n        format = dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT;\n      } else if (format === \"ABSOLUTE\") {\n        format = dateFormat.ABSOLUTETIME_FORMAT;\n      } else if (format === \"DATE\") {\n        format = dateFormat.DATETIME_FORMAT;\n      }\n    }\n    // Format the date\n    return dateFormat.asString(format, loggingEvent.startTime, this.timezoneOffset);\n  };\n  /**\n   *\n   * @returns {string}\n   */\n  public hostname = (): string => {\n    return LayoutReplacer.HOSTNAME || \"\";\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {any}\n   */\n  public formatMessage = (loggingEvent: LogEvent): string => {\n    return (LayoutReplacer.formatter as any)(...loggingEvent.data);\n  };\n\n  public formatJson = (loggingEvent: LogEvent): string => {\n    return JSON.stringify(loggingEvent.data);\n  };\n  /**\n   *\n   * @returns {string|string}\n   */\n  public endOfLine = () => {\n    return LayoutReplacer.EOL;\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {string}\n   */\n  public logLevel = (loggingEvent: LogEvent): string => {\n    return loggingEvent.level.toString();\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {any}\n   */\n  public startTime = (loggingEvent: LogEvent): string => {\n    return dateFormat.asString(\"hh:mm:ss\", loggingEvent.startTime, this.timezoneOffset);\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {string}\n   */\n  public startColour = (loggingEvent: LogEvent): string => {\n    const index: any = loggingEvent.level.toString();\n    return colorizeStart(LOG_COLORS[index as keyof typeof LOG_COLORS]);\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {string}\n   */\n  public endColour = (loggingEvent: LogEvent): string => {\n    const index: any = loggingEvent.level.toString();\n    return colorizeEnd(LOG_COLORS[index as keyof typeof LOG_COLORS]);\n  };\n  /**\n   *\n   * @returns {string}\n   */\n  public percent = () => {\n    return \"%\";\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {string}\n   */\n  public pid = (loggingEvent?: LogEvent): string => {\n    return loggingEvent && loggingEvent.pid ? loggingEvent.pid.toString() : process.pid.toString();\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @param specifier\n   * @returns {any}\n   */\n  public clusterInfo = (loggingEvent: LogEvent, specifier: string) => {\n    if (loggingEvent.cluster && specifier) {\n      return specifier\n        .replace(\"%m\", loggingEvent.cluster.master)\n        .replace(\"%w\", loggingEvent.cluster.worker)\n        .replace(\"%i\", loggingEvent.cluster.workerId);\n    } else if (loggingEvent.cluster) {\n      return `${loggingEvent.cluster.worker}@${loggingEvent.cluster.master}`;\n    }\n\n    return this.pid();\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @param specifier\n   * @returns {any}\n   */\n  public userDefined = (loggingEvent: LogEvent, specifier: string) => {\n    if (typeof this.tokens[specifier] !== \"undefined\") {\n      return typeof this.tokens[specifier] === \"function\" ? this.tokens[specifier](loggingEvent) : this.tokens[specifier];\n    }\n\n    return null;\n  };\n\n  build(): IReplacers {\n    return {\n      c: this.categoryName,\n      d: this.formatAsDate,\n      h: this.hostname,\n      m: this.formatMessage,\n      j: this.formatJson,\n      n: this.endOfLine,\n      p: this.logLevel,\n      r: this.startTime,\n      \"[\": this.startColour,\n      \"]\": this.endColour,\n      y: this.clusterInfo,\n      z: this.pid,\n      \"%\": this.percent,\n      x: this.userDefined\n    };\n  }\n}\n"]}