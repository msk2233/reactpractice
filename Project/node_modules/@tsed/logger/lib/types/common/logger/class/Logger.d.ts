import { LoggerAppenders } from "./LoggerAppenders";
import { ITableSettings } from "../utils/tableUtils";
import { LogLevel } from "../../core/LogLevel";
import { LogContext } from "../../core/LogContext";
export declare class Logger {
    private _name;
    /**
     *
     */
    constructor(_name?: string);
    private _appenders;
    get appenders(): LoggerAppenders;
    private _level;
    get level(): string;
    set level(level: string);
    /**
     *
     */
    private _context;
    get context(): LogContext;
    get name(): string;
    set name(value: string);
    /**
     * Create stack trace  the lines of least Logger.
     * @returns {string}
     */
    static createStack(): string;
    isLevelEnabled(otherLevel: string | LogLevel): boolean;
    /**
     * Prints to stdout with newline. Multiple arguments can be passed, with the first used as the primary message and all additional used as substitution values similar to printf() (the arguments are all passed to util.format()).
     * @param data
     * @returns {any}
     */
    debug(...data: any[]): Logger;
    /**
     *
     * @param data
     * @returns {any}
     */
    info(...data: any[]): Logger;
    /**
     *
     * @param data
     * @returns {any}
     */
    warn(...data: any[]): Logger;
    /**
     * Prints to stderr with newline. Multiple arguments can be passed, with the first used as the primary
     * message and all additional used as substitution values similar to printf() (the arguments are all
     * passed to util.format()).
     * @param data
     * @returns {any}
     */
    error(...data: any[]): Logger;
    fatal(...data: any[]): Logger;
    /**
     *
     * @param data
     * @returns {Logger}
     */
    trace(...data: any[]): Logger;
    /**
     *
     */
    start(): Logger;
    /**
     *
     */
    stop(): Logger;
    /**
     *
     * @returns {Promise<any[]>}
     */
    shutdown(): Promise<any[]>;
    /**
     *
     * @param list
     * @param settings
     */
    drawTable(list: any[], settings?: ITableSettings): string;
    /**
     *
     * @param list
     * @param settings
     * @returns {Logger}
     */
    printTable(list: any[], settings?: ITableSettings): this;
    /**
     *
     * @returns {Logger}
     */
    private write;
}
