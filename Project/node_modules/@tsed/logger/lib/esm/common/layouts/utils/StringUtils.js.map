{"version":3,"file":"StringUtils.js","sourceRoot":"","sources":["../../../../../src/common/layouts/utils/StringUtils.ts"],"names":[],"mappings":"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","sourcesContent":["export function truncate(truncation: string, toTruncate: string) {\n  let len;\n  if (truncation) {\n    len = parseInt(truncation.substr(1), 10);\n    return toTruncate.substring(0, len);\n  }\n\n  return toTruncate;\n}\n\nexport function pad(padding: string, toPad: string) {\n  let len;\n  if (padding) {\n    if (padding.charAt(0) === \"-\") {\n      len = parseInt(padding.substr(1), 10);\n      // Right pad with spaces\n      while (toPad.length < len) {\n        toPad += \" \";\n      }\n    } else {\n      len = parseInt(padding, 10);\n      // Left pad with spaces\n      while (toPad.length < len) {\n        toPad = ` ${toPad}`;\n      }\n    }\n  }\n  return toPad;\n}\n\nexport function truncateAndPad(toTruncAndPad: string, truncation: string, padding: string) {\n  let replacement = toTruncAndPad;\n  replacement = truncate(truncation, replacement);\n  replacement = pad(padding, replacement);\n  return replacement;\n}\n\nexport function format(fmt: string, ...args: unknown[]) {\n  const re = /(%?)(%([ojds]))/g;\n\n  if (args.length) {\n    const replacer = (match: any, escaped: any, ptn: any, flag: any) => {\n      let arg = args.shift();\n      switch (flag) {\n        case \"o\":\n          if (Array.isArray(arg)) {\n            arg = JSON.stringify(arg);\n            break;\n          }\n        case \"s\":\n          arg = \"\" + arg;\n          break;\n        case \"d\":\n          arg = Number(arg);\n          break;\n        case \"j\":\n          arg = JSON.stringify(arg);\n          break;\n      }\n\n      if (!escaped) {\n        return arg;\n      }\n\n      args.unshift(arg);\n      return match;\n    };\n\n    fmt = String(fmt).replace(re, replacer);\n  }\n\n  // arguments remain after formatting\n  if (args.length) {\n    fmt += \" \" + args.join(\" \");\n  }\n\n  // update escaped %% values\n  fmt = String(fmt).replace(/%{2,2}/g, \"%\");\n\n  return \"\" + fmt;\n}\n"]}