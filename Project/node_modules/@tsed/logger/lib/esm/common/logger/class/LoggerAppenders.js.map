{"version":3,"file":"LoggerAppenders.js","sourceRoot":"","sources":["../../../../../src/common/logger/class/LoggerAppenders.ts"],"names":[],"mappings":"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","sourcesContent":["import {AppendersRegistry} from \"../../appenders/registries/AppendersRegistry\";\nimport {BaseAppender} from \"../../appenders/class/BaseAppender\";\nimport {LogLevel} from \"../../core/LogLevel\";\nimport {AppenderConfiguration} from \"../../appenders/interfaces/AppenderConfiguration\";\n\nexport interface LoggerAppender {\n  name: string;\n  instance: any;\n  config: AppenderConfiguration;\n}\n\nexport class LoggerAppenders {\n  private _appenders: Map<string, LoggerAppender> = new Map();\n  private _lvls: Map<string, any> = new Map<string, any>();\n\n  get size() {\n    return this._appenders.size;\n  }\n\n  /**\n   * The `has() method returns a boolean indicating whether an element with the specified configuration name exists or not.\n   * @param name Required. The key of the element to test for presence in the Map object.`\n   * @returns {boolean}\n   */\n  has(name: string): boolean {\n    return this._appenders.has(name);\n  }\n\n  /**\n   * The `get() method returns a specified element from a loggerAppenders.\n   * @param name Required. The configuration of the element to return from the Map object.\n   * @returns {LoggerAppender}\n   */\n  get(name: string): LoggerAppender {\n    return this._appenders.get(name)!;\n  }\n\n  /**\n   * The `set()` method adds or updates an element with a specified key and value to a loggerAppenders object.\n   * @param name Required. The key of the element to add to the loggerAppenders object.\n   * @param config Required. The config of the element to add to the loggerAppenders object.\n   * @returns {LoggerAppender}\n   */\n  set(name: string, config: Omit<AppenderConfiguration, \"options\"> & {type: string | any; options?: any}): LoggerAppenders {\n    const type = typeof config.type === \"string\" ? config.type : (config.type as any)?.$name;\n    const opts = {\n      level: [\"debug\", \"info\", \"trace\", \"error\", \"warn\", \"fatal\"],\n      ...config,\n      type,\n      options: config.options || {}\n    };\n\n    if (!AppendersRegistry.has(opts.type)) {\n      const error = new Error(`Appender ${opts.type} doesn't exists. Check your configuration:\\n${JSON.stringify(opts)}\\n`);\n      error.name = \"UNKNOW_APPENDER\";\n      throw error;\n    }\n\n    const klass = AppendersRegistry.get(opts.type)!.provide;\n    const instance: BaseAppender = new klass(opts);\n\n    if (\"build\" in instance) {\n      instance.build();\n    }\n\n    this._appenders.set(name, {name, instance, config: opts});\n    this._lvls.clear();\n    return this;\n  }\n\n  /**\n   * Remove all configuration that match with the `name`.\n   * @param name Required. The key of the element to remove from the loggerAppenders object.\n   * @returns {boolean} Returns true if an element in the Map object existed and has been removed, or false if the element does not exist.\n   */\n  delete(name: string): boolean {\n    let existed = this._appenders.delete(name);\n    if (existed) {\n      this._lvls.clear();\n    }\n    return existed;\n  }\n\n  /**\n   * The `clear() method removes all elements from a loggerAppenders object.\n   */\n  clear(): void {\n    this._appenders.clear();\n    this._lvls.clear();\n  }\n\n  /**\n   * The `forEach()` method executes a provided function once per each key/value pair in the loggerAppenders object, in insertion order.\n   * @param callback Function to execute for each element.\n   * @param thisArg Value to use as this when executing callback.\n   */\n  forEach(callback: (value: LoggerAppender, key: string, map: Map<string, LoggerAppender>) => void, thisArg?: any): void {\n    this._appenders.forEach(callback, thisArg);\n  }\n\n  /**\n   *\n   * @returns {Array}\n   */\n  toArray() {\n    const array: any[] = [];\n    this._appenders.forEach((o) => array.push(o));\n    return array;\n  }\n\n  /**\n   * Return all appenders that match with the given loggingLevel.\n   * @param loggingLevel\n   * @returns {[BaseAppender]}\n   */\n  byLogLevel(loggingLevel: LogLevel): BaseAppender[] {\n    const level = loggingLevel.toString();\n    if (this._lvls.has(level)) {\n      return this._lvls.get(level);\n    }\n\n    const list = this.toArray()\n      .filter((appender) =>\n        appender.config.levels ? appender.config.levels.find((level: string) => level.toUpperCase() === loggingLevel.toString()) : true\n      )\n      .map((appender) => appender.instance);\n\n    this._lvls.set(loggingLevel.toString(), list);\n\n    return list;\n  }\n}\n"]}