"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.operationMapper = void 0;
const httpStatusMessages_1 = require("../../constants/httpStatusMessages");
const JsonParameterTypes_1 = require("../../domain/JsonParameterTypes");
const JsonSchemaMapperContainer_1 = require("../../registries/JsonSchemaMapperContainer");
function extractParameters(jsonOperation, options) {
    return jsonOperation
        .get("parameters")
        .filter((parameter) => (0, JsonParameterTypes_1.isParameterType)(parameter.get("in")))
        .reduce((inputs, parameter) => {
        const [parameters, bodyParameters] = inputs;
        if ([JsonParameterTypes_1.JsonParameterTypes.BODY, JsonParameterTypes_1.JsonParameterTypes.FILES].includes(parameter.get("in"))) {
            return [parameters, [...bodyParameters, parameter]];
        }
        return [[...parameters, parameter], bodyParameters];
    }, [[], []]);
}
function operationMapper(jsonOperation, { tags = [], defaultTags = [], ...options } = {}) {
    const { consumes, produces, ...operation } = (0, JsonSchemaMapperContainer_1.execMapper)("map", [jsonOperation], { ...options, ignore: ["parameters"] });
    if (operation.security) {
        operation.security = [].concat(operation.security);
    }
    if (jsonOperation.get("responses").size === 0) {
        operation.responses = {
            "200": {
                description: (0, httpStatusMessages_1.getStatusMessage)(200)
            }
        };
    }
    const parametersOptions = {
        ...options,
        consumes: jsonOperation.get("consumes")?.length ? jsonOperation.get("consumes") : ["application/json"]
    };
    const [parameters, bodyParameters] = extractParameters(jsonOperation, parametersOptions);
    operation.parameters = (0, JsonSchemaMapperContainer_1.execMapper)("operationInParameters", [parameters], options);
    if (bodyParameters.length) {
        operation.requestBody = (0, JsonSchemaMapperContainer_1.execMapper)("operationRequestBody", [bodyParameters], parametersOptions);
    }
    const operationTags = operation.tags?.length ? operation.tags : defaultTags;
    if (operationTags.length) {
        operation.tags = operationTags.map(({ name }) => name);
    }
    tags.push(...operationTags);
    return operation;
}
exports.operationMapper = operationMapper;
(0, JsonSchemaMapperContainer_1.registerJsonSchemaMapper)("operation", operationMapper);
//# sourceMappingURL=operationMapper.js.map