"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.operationInQueryMapper = void 0;
const core_1 = require("@tsed/core");
const JsonSchemaMapperContainer_1 = require("../../registries/JsonSchemaMapperContainer");
const ref_1 = require("../../utils/ref");
function buildExamples(property, examples) {
    if (!examples) {
        return undefined;
    }
    let hasKey = false;
    const newExamples = Object.entries(examples).reduce((acc, [key, { value, description, ...props }]) => {
        if (value[property] === undefined) {
            return acc;
        }
        hasKey = true;
        return {
            ...acc,
            [key]: {
                ...props,
                value: value[property],
                description
            }
        };
    }, {});
    return hasKey ? newExamples : undefined;
}
function inlineReference(parameter, { jsonParameter, ...options }) {
    const name = (0, ref_1.createRefName)(jsonParameter.$schema.getName(), options);
    const schema = options.components?.schemas?.[name];
    if (schema && !options.oldSchemas?.[name]) {
        delete options.components.schemas[jsonParameter.$schema.getName()];
    }
    return Object.entries(schema?.properties || {}).reduce((params, [key, { description, ...prop }]) => {
        return [
            ...params,
            (0, core_1.cleanObject)({
                ...parameter,
                name: key,
                required: (schema?.required || []).includes(key),
                description,
                schema: prop,
                style: prop.$ref ? "deepObject" : undefined,
                examples: buildExamples(key, parameter.examples)
            })
        ];
    }, []);
}
function operationInQueryMapper(parameter, { jsonSchema, jsonParameters, ...options }) {
    if (jsonSchema.$ref) {
        if (!parameter.name) {
            return inlineReference(parameter, options);
        }
        parameter.style = "deepObject";
    }
    parameter.schema = jsonSchema;
    return parameter;
}
exports.operationInQueryMapper = operationInQueryMapper;
(0, JsonSchemaMapperContainer_1.registerJsonSchemaMapper)("operationInQuery", operationInQueryMapper);
//# sourceMappingURL=operationInQueryMapper.js.map