"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.operationRequestBodyMapper = void 0;
const JsonRequestBody_1 = require("../../domain/JsonRequestBody");
const JsonSchema_1 = require("../../domain/JsonSchema");
const JsonSchemaMapperContainer_1 = require("../../registries/JsonSchemaMapperContainer");
function buildSchemaFromBodyParameters(parameters, options) {
    let schema = new JsonSchema_1.JsonSchema();
    const props = {};
    const refs = [];
    let propsLength = 0;
    const hasFile = parameters.some((param) => param.get("in") === "files");
    parameters.forEach((parameter) => {
        const name = parameter.getName();
        [...parameter.entries()]
            .filter(([key]) => !["in", "name"].includes(key))
            .forEach(([key, value]) => {
            if (props[key] === undefined) {
                props[key] = value;
            }
        });
        const jsonParameter = (0, JsonSchemaMapperContainer_1.execMapper)("operationInParameter", [parameter], options);
        if (name) {
            const propSchema = {
                ...(jsonParameter.schema || {
                    type: jsonParameter.type
                })
            };
            if (hasFile && jsonParameter.description) {
                propSchema.description = jsonParameter.description;
            }
            schema.addProperty(name, propSchema);
            if (parameter.get("required")) {
                schema.addRequired(name);
            }
            propsLength++;
        }
        else {
            refs.push(jsonParameter);
        }
    });
    if (!propsLength) {
        if (refs.length === 1) {
            return refs[0];
        }
    }
    schema.type("object");
    if (props.description && hasFile) {
        delete props.description;
    }
    return {
        schema: schema.toJSON(options),
        required: false,
        ...props
    };
}
function operationRequestBodyMapper(bodyParameters, { consumes, ...options }) {
    const { schema, examples, in: _, ...props } = buildSchemaFromBodyParameters(bodyParameters, options);
    const requestBody = new JsonRequestBody_1.JsonRequestBody(props);
    consumes.forEach((consume) => {
        requestBody.addContent(consume, schema, examples);
    });
    return (0, JsonSchemaMapperContainer_1.execMapper)("map", [requestBody], options);
}
exports.operationRequestBodyMapper = operationRequestBodyMapper;
(0, JsonSchemaMapperContainer_1.registerJsonSchemaMapper)("operationRequestBody", operationRequestBodyMapper);
//# sourceMappingURL=operationRequestBodyMapper.js.map