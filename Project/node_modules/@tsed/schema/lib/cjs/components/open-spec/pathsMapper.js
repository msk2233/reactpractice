"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pathsMapper = void 0;
const OperationVerbs_1 = require("../../constants/OperationVerbs");
const JsonSchemaMapperContainer_1 = require("../../registries/JsonSchemaMapperContainer");
const buildPath_1 = require("../../utils/buildPath");
const concatParameters_1 = require("../../utils/concatParameters");
const getJsonEntityStore_1 = require("../../utils/getJsonEntityStore");
const getJsonPathParameters_1 = require("../../utils/getJsonPathParameters");
const getOperationsStores_1 = require("../../utils/getOperationsStores");
const operationIdFormatter_1 = require("../../utils/operationIdFormatter");
const removeHiddenOperation_1 = require("../../utils/removeHiddenOperation");
const ALLOWED_VERBS = [
    OperationVerbs_1.OperationVerbs.ALL,
    OperationVerbs_1.OperationVerbs.GET,
    OperationVerbs_1.OperationVerbs.POST,
    OperationVerbs_1.OperationVerbs.PUT,
    OperationVerbs_1.OperationVerbs.PATCH,
    OperationVerbs_1.OperationVerbs.HEAD,
    OperationVerbs_1.OperationVerbs.OPTIONS,
    OperationVerbs_1.OperationVerbs.DELETE,
    OperationVerbs_1.OperationVerbs.TRACE
];
function pushToPath(paths, { path, method, operation }) {
    return {
        ...paths,
        [path]: {
            ...paths[path],
            [method.toLowerCase()]: operation
        }
    };
}
function mapOperationInPathParameters(options) {
    return ({ operationPath, operation, operationStore }) => {
        const { path, method } = operationPath;
        return (0, getJsonPathParameters_1.getJsonPathParameters)(options.ctrlRootPath, path).map(({ path, parameters }) => {
            path = path ? path : "/";
            parameters = (0, concatParameters_1.concatParameters)(parameters.map(({ type, ...param }) => {
                return {
                    ...param,
                    schema: {
                        type
                    }
                };
            }), operation);
            return {
                operation: {
                    ...operation,
                    parameters,
                    operationId: operation.operationId ||
                        (0, operationIdFormatter_1.getOperationId)(path, {
                            ...options,
                            store: operationStore
                        })
                },
                method,
                path
            };
        });
    };
}
function mapOperation(options) {
    return (operationStore) => {
        const operationPaths = operationStore.operation.getAllowedOperationPath(ALLOWED_VERBS);
        if (operationPaths.length === 0) {
            return [];
        }
        const operation = (0, JsonSchemaMapperContainer_1.execMapper)("operation", [operationStore.operation], options);
        return operationPaths.map((operationPath) => {
            return {
                operationPath,
                operation,
                operationStore
            };
        });
    };
}
function pathsMapper(model, { paths, rootPath, ...options }) {
    const store = (0, getJsonEntityStore_1.getJsonEntityStore)(model);
    const ctrlPath = store.path;
    const ctrlRootPath = (0, buildPath_1.buildPath)(rootPath + ctrlPath);
    options = {
        ...options,
        ctrlRootPath
    };
    return [...(0, getOperationsStores_1.getOperationsStores)(model).values()]
        .filter(removeHiddenOperation_1.removeHiddenOperation)
        .filter((operationStore) => operationStore.operation.getAllowedOperationPath(ALLOWED_VERBS).length > 0)
        .flatMap(mapOperation(options))
        .flatMap(mapOperationInPathParameters(options))
        .reduce(pushToPath, paths);
}
exports.pathsMapper = pathsMapper;
(0, JsonSchemaMapperContainer_1.registerJsonSchemaMapper)("paths", pathsMapper);
//# sourceMappingURL=pathsMapper.js.map