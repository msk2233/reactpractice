"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.payloadMapper = void 0;
const core_1 = require("@tsed/core");
const change_case_1 = require("change-case");
const JsonParameterTypes_1 = require("../../domain/JsonParameterTypes");
const SpecTypes_1 = require("../../domain/SpecTypes");
const JsonSchemaMapperContainer_1 = require("../../registries/JsonSchemaMapperContainer");
const generics_1 = require("../../utils/generics");
const somethingOf_1 = require("../../utils/somethingOf");
function mapOptions(parameter, options = {}) {
    return {
        ...options,
        groups: parameter.groups,
        groupsName: parameter.groupsName
    };
}
function getParameters(jsonOperation, options) {
    return jsonOperation.get("parameters").filter((parameter) => (0, JsonParameterTypes_1.isParameterType)(parameter.get("in")));
}
function payloadMapper(jsonOperationStore, operationPath, options) {
    const parameters = getParameters(jsonOperationStore.operation, options);
    const payloadName = (0, change_case_1.pascalCase)([operationPath.path, operationPath.method, "Payload"].join(" "));
    (0, core_1.setValue)(options, `components.schemas.${payloadName}`, {});
    const allOf = parameters
        .map((parameter) => {
        const opts = mapOptions(parameter, options);
        const jsonSchema = (0, JsonSchemaMapperContainer_1.execMapper)("item", [parameter.$schema], {
            ...opts,
            ...(0, generics_1.popGenerics)(parameter)
        });
        switch (parameter.get("in")) {
            case JsonParameterTypes_1.JsonParameterTypes.BODY:
                return jsonSchema;
            case JsonParameterTypes_1.JsonParameterTypes.QUERY:
            case JsonParameterTypes_1.JsonParameterTypes.PATH:
            case JsonParameterTypes_1.JsonParameterTypes.HEADER:
                return {
                    type: "object",
                    properties: {
                        [parameter.get("name")]: jsonSchema
                    }
                };
        }
        return jsonSchema;
    }, {})
        .filter(Boolean);
    return (0, somethingOf_1.makeOf)("allOf", allOf);
}
exports.payloadMapper = payloadMapper;
(0, JsonSchemaMapperContainer_1.registerJsonSchemaMapper)("payload", payloadMapper, SpecTypes_1.SpecTypes.ASYNCAPI);
//# sourceMappingURL=payloadMapper.js.map