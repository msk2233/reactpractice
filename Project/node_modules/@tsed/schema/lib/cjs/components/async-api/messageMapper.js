"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageMapper = void 0;
const core_1 = require("@tsed/core");
const OperationVerbs_1 = require("../../constants/OperationVerbs");
const SpecTypes_1 = require("../../domain/SpecTypes");
const JsonSchemaMapperContainer_1 = require("../../registries/JsonSchemaMapperContainer");
const somethingOf_1 = require("../../utils/somethingOf");
function messageMapper(jsonOperationStore, operationPath, { tags = [], defaultTags = [], ...options } = {}) {
    const { path: event, method } = operationPath;
    const messageKey = String(event);
    let message = (0, core_1.getValue)(options.components, "messages." + event, (0, core_1.cleanObject)({
        description: jsonOperationStore.operation.get("description"),
        summary: jsonOperationStore.operation.get("summary")
    }));
    if (method.toUpperCase() === OperationVerbs_1.OperationVerbs.PUBLISH) {
        const payload = (0, JsonSchemaMapperContainer_1.execMapper)("payload", [jsonOperationStore, operationPath], options);
        if (payload) {
            message.payload = payload;
        }
        const responses = jsonOperationStore.operation
            .getAllowedOperationPath([OperationVerbs_1.OperationVerbs.SUBSCRIBE])
            .map((operationPath) => {
            return (0, JsonSchemaMapperContainer_1.execMapper)("message", [jsonOperationStore, operationPath], options);
        })
            .filter(Boolean);
        const responsesSchema = (0, somethingOf_1.makeOf)("oneOf", responses);
        if (responsesSchema) {
            message["x-response"] = responsesSchema;
        }
    }
    else {
        const response = (0, JsonSchemaMapperContainer_1.execMapper)("response", [jsonOperationStore, operationPath], options);
        if (response) {
            message["x-response"] = response;
        }
    }
    options.components.messages = options.components.messages || {};
    options.components.messages[messageKey] = message;
    return { $ref: `#/components/messages/${messageKey}` };
}
exports.messageMapper = messageMapper;
(0, JsonSchemaMapperContainer_1.registerJsonSchemaMapper)("message", messageMapper, SpecTypes_1.SpecTypes.ASYNCAPI);
//# sourceMappingURL=messageMapper.js.map