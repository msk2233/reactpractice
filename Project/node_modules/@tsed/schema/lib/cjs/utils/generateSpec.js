"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSpec = void 0;
const core_1 = require("@tsed/core");
const SpecTypes_1 = require("../domain/SpecTypes");
const getSpec_1 = require("./getSpec");
const getSpecType_1 = require("./getSpecType");
const mapOpenSpec_1 = require("./mapOpenSpec");
const mergeSpec_1 = require("./mergeSpec");
const transformToOS2_1 = require("./transformToOS2");
/* node_env:start */
async function readSpec(path) {
    const { default: fs } = await Promise.resolve().then(() => __importStar(require("fs-extra")));
    if (fs.existsSync(path)) {
        try {
            return await fs.readJSON(path, { encoding: "utf8" });
        }
        catch (e) { }
    }
    /* istanbul ignore next */
    return {};
}
/* node_env:end */
/**
 * Generate OpenAPI spec from multiple sources (models, files, conf)
 * @param tokens
 * @param options
 */
async function generateSpec({ tokens, ...options }) {
    const { version = "1.0.0", acceptMimes, specPath, specVersion } = options;
    const fileSpec = /* node_env:start */ specPath ? await readSpec(specPath) : /* node_env:end */ {};
    const defaultSpec = (0, mapOpenSpec_1.mapOpenSpec)((0, core_1.getValue)(options, "spec", {}), {
        fileSpec,
        version,
        specVersion,
        acceptMimes
    });
    const specType = (0, getSpecType_1.getSpecTypeFromSpec)(defaultSpec);
    let controllersSpec = (0, getSpec_1.getSpec)(tokens, options);
    const spec = (0, mergeSpec_1.mergeSpec)(defaultSpec, controllersSpec);
    if (specType === SpecTypes_1.SpecTypes.SWAGGER) {
        return (0, transformToOS2_1.transformToOS2)(spec);
    }
    return spec;
}
exports.generateSpec = generateSpec;
//# sourceMappingURL=generateSpec.js.map