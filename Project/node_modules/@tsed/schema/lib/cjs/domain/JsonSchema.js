"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonSchema = void 0;
const core_1 = require("@tsed/core");
const enumRegistries_1 = require("../registries/enumRegistries");
const JsonSchemaMapperContainer_1 = require("../registries/JsonSchemaMapperContainer");
const getComputedType_1 = require("../utils/getComputedType");
const getJsonType_1 = require("../utils/getJsonType");
const serializeEnumValues_1 = require("../utils/serializeEnumValues");
const toJsonRegex_1 = require("../utils/toJsonRegex");
const JsonDiscriminator_1 = require("./JsonDiscriminator");
const JsonEntityStore_1 = require("./JsonEntityStore");
function mapProperties(properties) {
    // istanbul ignore next
    if (properties instanceof JsonSchema) {
        return properties;
    }
    return Object.entries(properties).reduce((properties, [key, schema]) => {
        properties[(0, toJsonRegex_1.toJsonRegex)(key)] = mapToJsonSchema(schema);
        return properties;
    }, {});
}
function mapToJsonSchema(item) {
    if ((0, core_1.isArray)(item)) {
        return item.map(mapToJsonSchema);
    }
    if (item.isStore || item.$isJsonDocument || item.isLazyRef) {
        return item;
    }
    if ((0, core_1.classOf)(item) !== Object && (0, core_1.isClass)(item)) {
        return JsonEntityStore_1.JsonEntityStore.from(item).schema;
    }
    if ((0, core_1.isObject)(item)) {
        return JsonSchema.from(item);
    }
    if ((0, core_1.isPrimitiveClass)(item)) {
        return JsonSchema.from({ type: item });
    }
    return item;
}
class JsonSchema extends Map {
    $kind = "schema";
    $isJsonDocument = true;
    $hooks = new core_1.Hooks();
    $required = new Set();
    $allow = [];
    $selfRequired;
    $forwardGroups = false;
    $ignore = false;
    isDiscriminatorKey = false;
    isDiscriminator = false;
    #nullable = false;
    #discriminator = null;
    #genericLabels;
    #nestedGenerics = [];
    #alias = new Map();
    #itemSchema;
    #target;
    #isGeneric = false;
    #isCollection = false;
    #ref = false;
    constructor(obj = {}) {
        super();
        if (obj) {
            this.assign(obj);
        }
    }
    get alias() {
        return this.#alias;
    }
    get nestedGenerics() {
        return this.#nestedGenerics;
    }
    set nestedGenerics(value) {
        this.#nestedGenerics = value;
    }
    get genericLabels() {
        return this.#genericLabels;
    }
    set genericLabels(value) {
        this.#genericLabels = value;
    }
    get isClass() {
        return (0, core_1.isClass)(this.class) && ![Map, Array, Set, Object, Date, Boolean, Number, String].includes(this.#target);
    }
    /**
     * Current schema is a collection
     */
    get isCollection() {
        return this.#isCollection;
    }
    /**
     * Current schema is a generic
     */
    get isGeneric() {
        return this.#isGeneric;
    }
    get discriminatorAncestor() {
        const ancestors = (0, core_1.ancestorsOf)(this.#target);
        const ancestor = ancestors.find((ancestor) => JsonEntityStore_1.JsonEntityStore.from(ancestor).schema.isDiscriminator);
        return ancestor && JsonEntityStore_1.JsonEntityStore.from(ancestor).schema;
    }
    /**
     * Current schema has generics items
     */
    get hasGenerics() {
        return !!(this.nestedGenerics && this.nestedGenerics.length);
    }
    get genericType() {
        return this.get("$ref");
    }
    get class() {
        return this.getComputedType();
    }
    get canRef() {
        return this.#ref;
    }
    get isNullable() {
        return this.#nullable || this.$allow.includes(null);
    }
    get isReadOnly() {
        return this.get("readOnly");
    }
    get isWriteOnly() {
        return this.get("writeOnly");
    }
    get hasDiscriminator() {
        return !!this.#discriminator;
    }
    static from(obj = {}) {
        return new JsonSchema(obj);
    }
    nullable(value) {
        this.#nullable = value;
    }
    itemSchema(obj = {}) {
        this.#itemSchema = this.#itemSchema || mapToJsonSchema(obj);
        this.#itemSchema.assign(obj);
        return this.#itemSchema;
    }
    getAliasOf(property) {
        return this.#alias.get(property);
    }
    addAlias(property, alias) {
        this.#alias.set(property, alias);
        this.#alias.set(alias, property);
        return this;
    }
    removeAlias(property) {
        const alias = this.#alias.get(property);
        alias && this.#alias.delete(alias);
        this.#alias.delete(property);
        return this;
    }
    $id($id) {
        super.set("$id", $id);
        return this;
    }
    $ref($ref) {
        super.set("$ref", $ref);
        return this;
    }
    $schema($schema) {
        super.set("$schema", $schema);
        return this;
    }
    /**
     * Create a ref and use name to sharing schema
     * @param name
     */
    label(name) {
        this.#ref = true;
        super.set("name", name);
        return this;
    }
    name(name) {
        super.set("name", name);
        return this;
    }
    ignore(cb) {
        if (typeof cb !== "boolean") {
            this.$hooks.on("ignore", cb);
        }
        this.$ignore = cb;
        return this;
    }
    /**
     * This keyword can be used to supply a default JSON value associated with a particular schema.
     * It is RECOMMENDED that a default value be valid against the associated schema.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.3
     */
    default(value) {
        super.set("default", value);
        return this;
    }
    /**
     * More readible form of a one-element "enum"
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.24
     */
    const(value) {
        super.set("const", value);
        return this;
    }
    /**
     * This attribute is a string that provides a full description of the of purpose the instance property.
     *
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.2
     */
    description(description) {
        super.set("description", description);
        return this;
    }
    discriminator() {
        this.isDiscriminator = true;
        return (this.#discriminator =
            this.#discriminator ||
                new JsonDiscriminator_1.Discriminator({
                    base: this.#target
                }));
    }
    discriminatorKey(propertyName) {
        this.discriminator().propertyName = propertyName;
        this.isDiscriminator = true;
        return this;
    }
    discriminatorValue(...values) {
        const discriminator = this.discriminatorAncestor.discriminator();
        discriminator.add(this.#target, values);
        this.isDiscriminator = true;
        const properties = this.get("properties");
        const schema = properties[discriminator.propertyName] ||
            new JsonSchema({
                type: "string"
            });
        if (values.length === 1) {
            schema.const(values[0]);
            schema.examples([values[0]]);
        }
        else {
            schema.enum(...values);
            schema.examples(values);
        }
        properties[discriminator.propertyName] = schema;
        this.set("properties", properties);
        return this;
    }
    /**
     * This keyword determines how child instances validate for arrays, and does not directly validate the immediate instance itself.
     * If "items" is an array of schemas, validation succeeds if every instance element
     * at a position greater than the size of "items" validates against "additionalItems".
     * Otherwise, "additionalItems" MUST be ignored, as the "items" schema
     * (possibly the default value of an empty schema) is applied to all elements.
     * Omitting this keyword has the same behavior as an empty schema.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.10
     */
    additionalItems(additionalItems) {
        super.set("additionalItems", mapToJsonSchema(additionalItems));
        return this;
    }
    /**
     * An array instance is valid against "contains" if at least one of its elements is valid against the given schema.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.14
     */
    contains(contains) {
        super.set("contains", mapToJsonSchema(contains));
        return this;
    }
    /**
     * Array of examples with no validation effect the value of "default" is usable as an example without repeating it under this keyword
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.4
     */
    examples(examples) {
        super.set("examples", examples);
        return this;
    }
    /**
     * Array of examples with no validation effect the value of "default" is usable as an example without repeating it under this keyword
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.4
     */
    example(...examples) {
        return this.examples(examples);
    }
    /**
     * This keyword determines how child instances validate for arrays, and does not directly validate the immediate instance itself.
     * Omitting this keyword has the same behavior as an empty schema.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.9
     */
    items(items) {
        super.set("items", (this.#itemSchema = mapToJsonSchema(items)));
        return this;
    }
    /**
     * Must be a non-negative integer.
     * An array instance is valid against "maxItems" if its size is less than, or equal to, the value of this keyword.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.11
     */
    maxItems(maxItems) {
        super.set("maxItems", maxItems);
        return this;
    }
    /**
     * Must be a non-negative integer.
     * An array instance is valid against "maxItems" if its size is greater than, or equal to, the value of this keyword.
     * Omitting this keyword has the same behavior as a value of 0.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.12
     */
    minItems(minItems) {
        super.set("minItems", minItems);
        return this;
    }
    /**
     * If this keyword has boolean value false, the instance validates successfully.
     * If it has boolean value true, the instance validates successfully if all of its elements are unique.
     * Omitting this keyword has the same behavior as a value of false.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.13
     */
    uniqueItems(uniqueItems) {
        super.set("uniqueItems", uniqueItems);
        return this;
    }
    /**
     * Must be a non-negative integer.
     * An object instance is valid against "maxProperties" if its number of properties is less than, or equal to, the value of this keyword.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.15
     */
    maxProperties(maxProperties) {
        super.set("maxProperties", maxProperties);
        return this;
    }
    /**
     * Must be a non-negative integer.
     * An object instance is valid against "maxProperties" if its number of properties is greater than,
     * or equal to, the value of this keyword.
     * Omitting this keyword has the same behavior as a value of 0.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.16
     */
    minProperties(minProperties) {
        super.set("minProperties", minProperties);
        return this;
    }
    allow(...allow) {
        this.$allow.push(...allow);
        return this;
    }
    /**
     * Elements of this array must be unique.
     * An object instance is valid against this keyword if every item in the array is the name of a property in the instance.
     * Omitting this keyword has the same behavior as an empty array.
     *
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.17
     */
    required(required = true) {
        if ((0, core_1.isArray)(required)) {
            this.$required.clear();
            required.forEach((value) => this.$required.add(value));
        }
        else {
            const schema = this.clone();
            schema.$selfRequired = required;
            return schema;
        }
        return this;
    }
    addRequired(property) {
        this.$required.add(property);
        return this;
    }
    removeRequired(property) {
        this.$required.delete(property);
        return this;
    }
    isRequired(property) {
        return this.$required.has(property);
    }
    /**
     * This keyword determines how child instances validate for objects, and does not directly validate the immediate instance itself.
     * Validation succeeds if, for each name that appears in both the instance and as a name within this keyword's value,
     * the child instance for that name successfully validates against the corresponding schema.
     * Omitting this keyword has the same behavior as an empty object.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.18
     */
    properties(properties) {
        super.set("properties", mapProperties(properties));
        return this;
    }
    addProperty(key, schema) {
        const properties = this.get("properties") || {};
        properties[key] = schema;
        super.set("properties", mapProperties(properties));
        return this;
    }
    /**
     * This attribute is an object that defines the schema for a set of property names of an object instance.
     * The name of each property of this attribute's object is a regular expression pattern in the ECMA 262, while the value is a schema.
     * If the pattern matches the name of a property on the instance object, the value of the instance's property
     * MUST be valid against the pattern name's schema value.
     * Omitting this keyword has the same behavior as an empty object.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.19
     */
    patternProperties(patternProperties) {
        super.set("patternProperties", mapProperties(patternProperties));
        return this;
    }
    /**
     * This attribute defines a schema for all properties that are not explicitly defined in an object type definition.
     * If specified, the value MUST be a schema or a boolean.
     * If false is provided, no additional properties are allowed beyond the properties defined in the schema.
     * The default value is an empty schema which allows any value for additional properties.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.20
     */
    additionalProperties(additionalProperties) {
        super.set("additionalProperties", mapToJsonSchema(additionalProperties));
        return this;
    }
    /**
     * This attribute defines a schema for all properties that are not explicitly defined in an object type definition.
     * If specified, the value MUST be a schema or a boolean.
     * If false is provided, no additional properties are allowed beyond the properties defined in the schema.
     * The default value is an empty schema which allows any value for additional properties.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.20
     * @alias additionalProperties
     * @param unknown
     */
    unknown(unknown = true) {
        return this.additionalProperties(unknown);
    }
    /**
     * This keyword specifies rules that are evaluated if the instance is an object and contains a certain property.
     * Each property specifies a dependency.
     * If the dependency value is an array, each element in the array must be unique.
     * Omitting this keyword has the same behavior as an empty object.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.21
     */
    dependencies(dependencies) {
        super.set("dependencies", mapProperties(dependencies));
        return this;
    }
    /**
     * Takes a schema which validates the names of all properties rather than their values.
     * Note the property name that the schema is testing will always be a string.
     * Omitting this keyword has the same behavior as an empty schema.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.22
     */
    propertyNames(propertyNames) {
        super.set("propertyNames", mapToJsonSchema(propertyNames));
        return this;
    }
    enum(enumValue, ...enumValues) {
        if (enumRegistries_1.enumsRegistry.has(enumValue)) {
            return this.enum(enumRegistries_1.enumsRegistry.get(enumValue));
        }
        if (enumValue instanceof JsonSchema) {
            if (enumValue.getName()) {
                super.set("enum", enumValue);
            }
            else {
                super.set("enum", enumValue.get("enum")).any(...enumValue.getJsonType());
            }
        }
        else {
            const { values, types } = (0, serializeEnumValues_1.serializeEnumValues)([enumValue, enumValues].flat());
            super.set("enum", values).any(...types);
        }
        return this;
    }
    /**
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.1
     */
    definitions(definitions) {
        super.set("definitions", mapProperties(definitions));
        return this;
    }
    /**
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.26
     */
    allOf(allOf) {
        super.set("allOf", allOf.map(mapToJsonSchema));
        return this;
    }
    /**
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.27
     */
    anyOf(anyOf) {
        super.set("anyOf", anyOf.map(mapToJsonSchema));
        return this;
    }
    /*
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.28
     */
    oneOf(oneOf) {
        let resolvedOneOf = oneOf.map(mapToJsonSchema);
        if (resolvedOneOf.length === 1 && !(oneOf[0] instanceof JsonSchema)) {
            if (!resolvedOneOf[0].hasDiscriminator) {
                return this.type(oneOf[0]);
            }
            const children = resolvedOneOf[0].discriminator().children();
            if (!children.length) {
                return this.type(oneOf[0]);
            }
            resolvedOneOf = children.map(mapToJsonSchema);
        }
        super.set("oneOf", resolvedOneOf);
        const jsonSchema = resolvedOneOf[0];
        if (jsonSchema.isDiscriminator) {
            const discriminator = jsonSchema.discriminatorAncestor.discriminator();
            const { propertyName } = discriminator;
            super.set("discriminator", { propertyName });
            this.isDiscriminator = true;
            this.#discriminator = discriminator;
        }
        return this;
    }
    /**
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.29
     */
    not(not) {
        super.set("not", mapToJsonSchema(not));
        return this;
    }
    /**
     * Must be strictly greater than 0.
     * A numeric instance is valid only if division by this keyword's value results in an integer.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.1
     */
    multipleOf(multipleOf) {
        super.set("multipleOf", multipleOf);
        return this;
    }
    /**
     * Representing an inclusive upper limit for a numeric instance.
     * This keyword validates only if the instance is less than or exactly equal to "maximum".
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.2
     */
    maximum(maximum) {
        super.set("maximum", maximum);
        return this;
    }
    /**
     * Representing an exclusive upper limit for a numeric instance.
     * This keyword validates only if the instance is strictly less than (not equal to) to "exclusiveMaximum".
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.3
     */
    exclusiveMaximum(exclusiveMaximum) {
        super.set("exclusiveMaximum", exclusiveMaximum);
        return this;
    }
    /**
     * Representing an inclusive lower limit for a numeric instance.
     * This keyword validates only if the instance is greater than or exactly equal to "minimum".
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.4
     */
    minimum(minimum) {
        super.set("minimum", minimum);
        return this;
    }
    /**
     * Representing an exclusive lower limit for a numeric instance.
     * This keyword validates only if the instance is strictly greater than (not equal to) to "exclusiveMinimum".
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.5
     */
    exclusiveMinimum(exclusiveMinimum) {
        super.set("exclusiveMinimum", exclusiveMinimum);
        return this;
    }
    /**
     * Must be a non-negative integer.
     * A string instance is valid against this keyword if its length is less than, or equal to, the value of this keyword.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.6
     */
    maxLength(maxLength) {
        super.set("maxLength", maxLength);
        return this;
    }
    /**
     * Must be a non-negative integer.
     * A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword.
     * Omitting this keyword has the same behavior as a value of 0.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.7
     */
    minLength(minLength) {
        super.set("minLength", minLength);
        return this;
    }
    /**
     * Should be a valid regular expression, according to the ECMA 262 regular expression dialect.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.8
     */
    pattern(pattern) {
        super.set("pattern", (0, toJsonRegex_1.toJsonRegex)(pattern));
        return this;
    }
    /**
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-8
     */
    format(format) {
        super.set("format", format);
        return this;
    }
    /**
     * A single type, or a union of simple types
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.25
     */
    type(type) {
        switch (type) {
            case Map:
                super.set("type", (0, getJsonType_1.getJsonType)(type));
                this.#target = type;
                this.#isCollection = true;
                if (!this.has("additionalProperties")) {
                    super.set("additionalProperties", this.itemSchema({}));
                }
                break;
            case Array:
                super.set("type", (0, getJsonType_1.getJsonType)(type));
                this.#target = type;
                this.#isCollection = true;
                if (!this.has("items")) {
                    super.set("items", this.itemSchema({}));
                }
                break;
            case Set:
                super.set("type", (0, getJsonType_1.getJsonType)(type));
                this.#target = type;
                this.#isCollection = true;
                this.uniqueItems(true);
                if (!this.has("items")) {
                    super.set("items", this.itemSchema({}));
                }
                break;
            case "integer":
                super.set("type", (0, getJsonType_1.getJsonType)(type));
                this.integer();
                break;
            case Object:
            case Date:
            case Boolean:
            case Number:
            case String:
                super.set("type", (0, getJsonType_1.getJsonType)(type));
                this.#target = type;
                if (!this.has("properties")) {
                    super.set("properties", {});
                }
                break;
            default:
                if ((0, core_1.isClass)(type) || (0, core_1.isFunction)(type)) {
                    super.set("type", undefined);
                    this.#target = type;
                    if (!this.has("properties")) {
                        super.set("properties", {});
                    }
                }
                else {
                    const jsonType = (0, getJsonType_1.getJsonType)(type);
                    if (jsonType === "generic") {
                        this.#isGeneric = true;
                        super.set("$ref", type);
                    }
                    else {
                        super.set("type", jsonType);
                    }
                }
        }
        return this;
    }
    any(...types) {
        const hasClasses = types.filter((type) => (0, core_1.isClass)(type));
        if (hasClasses.length >= 2) {
            this.oneOf(types.filter((value) => {
                if (value !== null) {
                    this.nullable(true);
                    return true;
                }
                return false;
            }));
        }
        else {
            if (types.length) {
                types = (0, core_1.uniq)(types).map(getJsonType_1.getJsonType);
                if (types.includes("null")) {
                    this.nullable(true);
                    types = types.filter((o) => o !== "null");
                }
            }
            else {
                types = ["integer", "number", "string", "boolean", "array", "object"];
                this.nullable(true);
            }
            this.type(types.length === 1 ? types[0] : types);
        }
        return this;
    }
    integer() {
        super.set("type", "integer");
        super.set("multipleOf", 1.0);
        return this;
    }
    /**
     * This attribute is a string that provides a short description of the instance property.
     *
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.2
     */
    title(title) {
        super.set("title", title);
        return this;
    }
    readOnly(readOnly) {
        super.set("readOnly", readOnly);
        return this;
    }
    writeOnly(readOnly) {
        super.set("writeOnly", readOnly);
        return this;
    }
    customKey(key, value) {
        super.set(`#${key}`, value);
        return this;
    }
    toObject(options) {
        return this.toJSON(options);
    }
    toJSON(options) {
        return (0, JsonSchemaMapperContainer_1.execMapper)("schema", [this], options);
    }
    assign(obj = {}) {
        const entries = obj instanceof JsonSchema ? [...obj.entries()] : Object.entries(obj);
        entries.forEach(([key, value]) => {
            this.set(key, value);
        });
        if (obj instanceof JsonSchema) {
            this.$selfRequired = obj.$selfRequired;
            this.$allow.push(...obj.$allow);
            obj.$required.forEach((key) => {
                this.$required.add(key);
            });
            this.#discriminator = this.#discriminator ? new JsonDiscriminator_1.Discriminator(this.#discriminator) : null;
            this.isDiscriminator = obj.isDiscriminator;
            this.isDiscriminatorKey = obj.isDiscriminatorKey;
            this.#ref = obj.#ref;
            this.#alias = new Map(this.#alias.entries());
            obj.#genericLabels && (this.#genericLabels = [...obj.#genericLabels]);
            this.#nestedGenerics = obj.#nestedGenerics.map((item) => [...item]);
            this.#target = obj.#target;
            this.#isGeneric = obj.#isGeneric;
            this.#isCollection = obj.#isCollection;
            this.#ref = obj.#ref;
            super.set("type", obj.get("type"));
        }
        return this;
    }
    set(key, value) {
        if (key in this) {
            (0, core_1.isFunction)(this[key]) && this[key](value);
        }
        else {
            super.set(key, value);
        }
        return this;
    }
    /**
     * Return the itemSchema computed type.
     * If the type is a function used for recursive model,
     * the function will be called to get the right type.
     */
    getComputedType() {
        return (0, getComputedType_1.getComputedType)(this.#target);
    }
    getComputedItemType() {
        return this.#itemSchema ? this.#itemSchema.getComputedType() : this.getComputedType();
    }
    /**
     * Return the Json type as string
     */
    getJsonType() {
        return this.get("type") || (0, getJsonType_1.getJsonType)(this.getComputedType());
    }
    getTarget() {
        return this.#target;
    }
    /**
     * Get the symbolic name of the entity
     */
    getName() {
        return this.get("name") || ((0, core_1.isClass)(this.#target) ? (0, core_1.nameOf)((0, core_1.classOf)(this.getComputedType())) : "");
    }
    clone() {
        return new JsonSchema(this);
    }
}
exports.JsonSchema = JsonSchema;
//# sourceMappingURL=JsonSchema.js.map