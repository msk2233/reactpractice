import { isArray } from "@tsed/core";
import { alterIgnore } from "../../hooks/alterIgnore.js";
import { execMapper, registerJsonSchemaMapper } from "../../registries/JsonSchemaMapperContainer.js";
import { mapNullableType } from "../../utils/mapNullableType.js";
/**
 * Serialize Any object to a json schema
 * @param input
 * @param options
 * @ignore
 */
export function objectMapper(input, options) {
    const { specType, operationIdFormatter, root, components, genericTypes, nestedGenerics, useAlias, genericLabels, ...ctx } = options;
    return Object.entries(input).reduce((obj, [key, value]) => {
        if (options.withIgnoredProps !== false && !alterIgnore(value, ctx)) {
            const opts = {
                ...options,
                groups: input?.$forwardGroups || value?.$forwardGroups ? options.groups : undefined
            };
            // remove groups to avoid bad schema generation over children models
            obj[key] = execMapper("item", [value], opts);
            obj[key] = mapNullableType(obj[key], value, opts);
        }
        return obj;
    }, isArray(input) ? [] : {});
}
registerJsonSchemaMapper("object", objectMapper);
//# sourceMappingURL=objectMapper.js.map