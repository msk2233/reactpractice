import { camelCase } from "change-case";
import { JsonParameterTypes } from "../../domain/JsonParameterTypes.js";
import { execMapper, hasMapper, registerJsonSchemaMapper } from "../../registries/JsonSchemaMapperContainer.js";
import { popGenerics } from "../../utils/generics.js";
function mapOptions(parameter, options = {}) {
    return {
        ...options,
        groups: parameter.groups,
        groupsName: parameter.groupsName
    };
}
export function operationInParameterMapper(jsonParameter, opts) {
    const options = mapOptions(jsonParameter, opts);
    const schemas = { ...(options.components?.schemas || {}) };
    const { type, schema, ...parameter } = execMapper("map", [jsonParameter], options);
    const jsonSchema = execMapper("item", [jsonParameter.$schema], {
        ...options,
        ...popGenerics(jsonParameter)
    });
    parameter.required = parameter.required || jsonParameter.get("in") === JsonParameterTypes.PATH;
    const paramOpts = {
        ...options,
        jsonSchema,
        jsonParameter,
        oldSchemas: schemas
    };
    const mapperName = camelCase(`operationIn ${jsonParameter.get("in")}`);
    if (hasMapper(mapperName)) {
        return execMapper(mapperName, [parameter], paramOpts);
    }
    parameter.schema = jsonSchema;
    return parameter;
}
registerJsonSchemaMapper("operationInParameter", operationInParameterMapper);
//# sourceMappingURL=operationInParameterMapper.js.map