import { camelCase } from "change-case";
import { OperationVerbs } from "../../constants/OperationVerbs.js";
import { execMapper, registerJsonSchemaMapper } from "../../registries/JsonSchemaMapperContainer.js";
import { buildPath } from "../../utils/buildPath.js";
import { getJsonEntityStore } from "../../utils/getJsonEntityStore.js";
import { getOperationsStores } from "../../utils/getOperationsStores.js";
import { removeHiddenOperation } from "../../utils/removeHiddenOperation.js";
const ALLOWED_VERBS = [OperationVerbs.PUBLISH, OperationVerbs.SUBSCRIBE];
function pushToChannels(options) {
    return (channels, { operationPath, operationStore }) => {
        const path = options.ctrlRootPath || "/";
        const method = operationPath.method.toLowerCase();
        const operationId = camelCase(`${method.toLowerCase()} ${operationStore.parent.schema.getName()}`);
        const message = execMapper("message", [operationStore, operationPath], options);
        return {
            ...channels,
            [path]: {
                ...channels[path],
                [method]: {
                    ...channels[path]?.[method],
                    operationId,
                    message: {
                        oneOf: [...(channels[path]?.[method]?.message?.oneOf || []), message]
                    }
                }
            }
        };
    };
}
function expandOperationPaths(options) {
    return (operationStore) => {
        const operationPaths = operationStore.operation.getAllowedOperationPath(ALLOWED_VERBS);
        if (operationPaths.length === 0) {
            return [];
        }
        return operationPaths.map((operationPath) => {
            return {
                operationPath,
                operationStore
            };
        });
    };
}
export function channelsMapper(model, { channels, rootPath, ...options }) {
    const store = getJsonEntityStore(model);
    const ctrlPath = store.path;
    const ctrlRootPath = buildPath(rootPath + ctrlPath);
    options = {
        ...options,
        ctrlRootPath
    };
    return [...getOperationsStores(model).values()]
        .filter(removeHiddenOperation)
        .flatMap(expandOperationPaths(options))
        .reduce(pushToChannels(options), channels);
}
registerJsonSchemaMapper("channels", channelsMapper);
//# sourceMappingURL=channelsMapper.js.map