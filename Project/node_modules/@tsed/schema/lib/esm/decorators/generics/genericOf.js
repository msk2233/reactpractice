import { isObject } from "@tsed/core";
import { JsonEntityStore } from "../../domain/JsonEntityStore.js";
import { string } from "../../utils/from.js";
/**
 * @ignore
 */
function isEnum(type) {
    return isObject(type) && !("toJSON" in type);
}
/**
 * Set the types of a Generic class.
 *
 * ## Example
 *
 * ```typescript
 * class Product {
 *   @Property()
 *   label: string;
 * }
 *
 * @Generics("T")
 * class Paginated<T> {
 *   @CollectionOf("T")
 *   data: T[];
 *
 *   @Property()
 *   totalCount: number;
 * }
 *
 * class Payload {
 *    @GenericOf(Product)
 *    products: Paginated<Product>;
 * }
 * ```
 *
 * ## Example with nested generics
 *
 * ```typescript
 * class Product {
 *   @Property()
 *   label: string;
 * }
 *
 * @Generics("T")
 * class Paginated<T> {
 *   @CollectionOf("T")
 *   data: T[];
 *
 *   @Property()
 *   totalCount: number;
 * }
 *
 * @Generics("D")
 * class Submission<D> {
 *   @Property()
 *   _id: string;
 *
 *   @Property("D")
 *   data: D;
 * }
 *
 * class Payload {
 *    @GenericOf(Submissions).Nested(Product)
 *    submissions: Paginated<Submission<Product>>;
 * }
 * ```
 *
 * @param {Type<any>[]} generics
 * @decorator
 * @validation
 * @swagger
 * @schema
 * @input
 * @generics
 */
export function GenericOf(...generics) {
    const nestedGenerics = [
        generics.map((type) => {
            if (isEnum(type)) {
                return string().enum(Object.values(type));
            }
            return type;
        })
    ];
    const decorator = (...args) => {
        const store = JsonEntityStore.from(...args);
        store.nestedGenerics = nestedGenerics;
    };
    decorator.Nested = (...generics) => {
        nestedGenerics.push(generics);
        return decorator;
    };
    return decorator;
}
//# sourceMappingURL=genericOf.js.map