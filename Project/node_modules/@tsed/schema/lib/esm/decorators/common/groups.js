import { DecoratorTypes, isArray } from "@tsed/core";
import { matchGroups } from "../../utils/matchGroups.js";
import { JsonEntityFn } from "./jsonEntityFn.js";
/**
 * @ignore
 */
function groupsClass(groups, entity) {
    const entries = Object.entries(groups[0]);
    entity.children.forEach((propEntity) => {
        const groups = entries.filter(([, props]) => props.includes(propEntity.propertyName)).map(([key]) => key);
        const decorator = Groups(...groups);
        decorator(propEntity.target, propEntity.propertyKey);
    });
}
export function Groups(...groups) {
    return JsonEntityFn((entity) => {
        switch (entity.decoratorType) {
            case DecoratorTypes.CLASS:
                groupsClass(groups, entity);
                break;
            case DecoratorTypes.PROP:
                entity.schema.$hooks.on("groups", (prev, givenGroups) => {
                    if (!prev) {
                        if (matchGroups(groups, givenGroups)) {
                            return true;
                        }
                    }
                    return prev;
                });
                break;
            case DecoratorTypes.PARAM:
                let groupsName = "";
                if (groups.length == 2 && isArray(groups[1])) {
                    groupsName = groups[0];
                    groups = groups[1];
                }
                entity.parameter.groups = groups;
                entity.parameter.groupsName = groupsName;
                break;
        }
    });
}
//# sourceMappingURL=groups.js.map