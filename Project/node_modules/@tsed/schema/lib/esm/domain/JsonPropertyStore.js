import { __decorate } from "tslib";
import { DecoratorTypes, Metadata, prototypeOf } from "@tsed/core";
import { JsonEntityStore } from "./JsonEntityStore.js";
import { JsonSchema } from "./JsonSchema.js";
import { JsonEntityComponent } from "../decorators/config/jsonEntityComponent.js";
let JsonPropertyStore = class JsonPropertyStore extends JsonEntityStore {
    parent = JsonEntityStore.from(this.target);
    /**
     * Return the required state.
     * @returns {boolean}
     */
    get required() {
        return this.parent.schema.isRequired(this.propertyKey);
    }
    /**
     * Change the state of the required data.
     * @param value
     */
    set required(value) {
        if (value) {
            this.parent.schema.addRequired(this.propertyKey);
        }
        else {
            this.parent.schema.removeRequired(this.propertyKey);
        }
    }
    get allowedRequiredValues() {
        return this.schema.$allow;
    }
    discriminatorKey() {
        this.parent.schema.discriminatorKey(String(this.propertyKey));
        this.itemSchema.isDiscriminatorKey = true;
        return this;
    }
    isDiscriminatorKey() {
        return this.itemSchema.isDiscriminatorKey;
    }
    /**
     * Check precondition between value, required and allowedRequiredValues to know if the entity is required.
     * @param value
     * @returns {boolean}
     */
    isRequired(value) {
        return this.required && [undefined, null, ""].includes(value) && !this.allowedRequiredValues.includes(value);
    }
    build() {
        if (!this._type) {
            this.buildType(Metadata.getType(prototypeOf(this.target), this.propertyKey));
        }
        this._type = this._type || Object;
        const properties = this.parent.schema.get("properties");
        let schema = properties[this.propertyName];
        if (!schema) {
            this.parent.children.set(this.propertyName, this);
            schema = JsonSchema.from({
                type: this.collectionType || this.type
            });
            if (this.collectionType) {
                schema.itemSchema(this.type);
            }
        }
        this.parent.schema.addProperty(this.propertyName, schema);
        this._schema = schema;
    }
    static get(target, propertyKey) {
        return JsonEntityStore.from(prototypeOf(target), propertyKey);
    }
};
JsonPropertyStore = __decorate([
    JsonEntityComponent(DecoratorTypes.PROP)
], JsonPropertyStore);
export { JsonPropertyStore };
export const PropertyMetadata = JsonPropertyStore;
//# sourceMappingURL=JsonPropertyStore.js.map