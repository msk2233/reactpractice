import { execMapper } from "../registries/JsonSchemaMapperContainer.js";
import { JsonMap } from "./JsonMap.js";
import { formatParameterType } from "./JsonParameterTypes.js";
export class JsonParameter extends JsonMap {
    $kind = "operationInParameter";
    nestedGenerics = [];
    groups;
    groupsName;
    $schema;
    expression;
    getName() {
        const name = this.get("name");
        if (this.get("in") === "files") {
            return name.split(".")[0];
        }
        return name;
    }
    name(name) {
        this.set("name", name);
        return this;
    }
    examples(examples) {
        super.set("examples", examples);
        return this;
    }
    description(description) {
        this.set("description", description);
        return this;
    }
    in(inType, expression = "") {
        this.set("in", formatParameterType(inType));
        this.expression = expression;
        return this;
    }
    required(required) {
        this.set("required", required);
        return this;
    }
    schema(schema) {
        this.$schema = schema;
        return this;
    }
    toJSON(options) {
        return execMapper("operationInParameter", [this], options);
    }
}
//# sourceMappingURL=JsonParameter.js.map