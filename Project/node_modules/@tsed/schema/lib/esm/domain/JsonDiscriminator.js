import { cleanObject } from "@tsed/core";
export class Discriminator {
    propertyName;
    base;
    values = new Map();
    types = new Map();
    constructor({ base, propertyName, types, values } = {}) {
        Object.assign(this, cleanObject({
            base,
            propertyName,
            types: types ? new Map(types) : undefined,
            values: values ? new Map(values) : undefined
        }));
    }
    add(type, values) {
        values.forEach((value) => {
            this.values.set(value, type);
        });
        this.types.set(type, values);
        return this;
    }
    getType(discriminatorValue) {
        return this.values.get(discriminatorValue) || this.base;
    }
    getValues(type) {
        return this.types.get(type);
    }
    getDefaultValue(type) {
        const values = this.types.get(type);
        return values ? values[0] : undefined;
    }
    children() {
        return [...new Set([...this.types.keys()])];
    }
}
//# sourceMappingURL=JsonDiscriminator.js.map