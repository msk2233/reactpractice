import { uniq } from "@tsed/core";
import { SpecTypes } from "../domain/SpecTypes.js";
function hasNullable(obj) {
    return obj.oneOf.find((o) => o.type === "null");
}
export function mapNullableType(obj, schema, options) {
    if (!schema?.isNullable) {
        return obj;
    }
    let types = [].concat(obj.type).filter(Boolean);
    switch (options.specType) {
        default:
        case SpecTypes.JSON:
            if (!obj.discriminator) {
                if (obj.oneOf) {
                    if (!hasNullable(obj)) {
                        obj.oneOf.unshift({
                            type: "null"
                        });
                    }
                }
                else {
                    obj.type = uniq(["null", ...types]);
                }
            }
            break;
        case SpecTypes.OPENAPI:
            obj.nullable = true;
            if (!obj.oneOf) {
                if (types.length > 1) {
                    obj.oneOf = types.map((type) => ({ type }));
                    delete obj.type;
                }
                else {
                    obj.type = types[0];
                }
            }
            break;
    }
    return obj;
}
//# sourceMappingURL=mapNullableType.js.map