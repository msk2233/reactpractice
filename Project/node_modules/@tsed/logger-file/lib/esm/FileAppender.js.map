{"version":3,"file":"FileAppender.js","sourceRoot":"","sources":["../../src/FileAppender.ts"],"names":[],"mappings":"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","sourcesContent":["import {Appender, BaseAppender, LogEvent} from \"@tsed/logger\";\nimport {normalize} from \"path\";\nimport * as Os from \"os\";\n// @ts-ignore\nimport streams from \"streamroller\";\n\nconst eol = Os.EOL || \"\\n\";\n\n/**\n * ## File Appender\n *\n * The file appender writes log events to a file. It supports an optional maximum file size, and will keep a configurable number of backups. When using the file appender, you should also call `logger.shutdown()` when your application terminates, to ensure that any remaining asynchronous writes have finished. Although the file appender uses the streamroller library, this is included as a dependency of ts-log-debug so you do not need to include it yourself.\n *\n * ## Configuration\n *\n * * type - \"file\"\n * * filename - string - the path of the file where you want your logs written.\n * * maxLogSize - integer (optional) - the maximum size (in bytes) for the log file. If not specified, then no log rolling will happen.\n * * backups - integer (optional, default value = 5) - the number of old log files to keep during log rolling.\n * * layout - (optional, defaults to basic layout) - see layouts\n *\n * Any other configuration parameters will be passed to the underlying streamroller implementation (see also node.js core file streams):\n *\n * * encoding - string (default “utf-8”)\n * * mode - integer (default 0644)\n * * flags - string (default ‘a’)\n * * compress - boolean (default false) - compress the backup files during rolling (backup files will have .gz extension)\n *\n * ## Example\n *\n * ```typescript\n * import {Logger} from \"@tsed/logger\";\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders.set(\"log-file\", {\n *     type: \"file\",\n *     filename: \"all-the-logs.log\"\n * });\n * logger.debug('I will be logged in all-the-logs.log');\n * ```\n * > This example will result in a single log file (all-the-logs.log) containing the log messages.\n *\n * ## Example with log rolling (and compressed backups)\n *\n * ```typescript\n * import {Logger} from \"@tsed/logger\";\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders.set(\"log-file2\", {\n *     type: \"file\",\n *     filename: \"all-the-logs.log\",\n *     maxLogSize: 10485760,\n *     backups: 3,\n *     compress: true\n * });\n * logger.debug('I will be logged in all-the-logs.log');\n * ```\n *\n * :::\n * This will result in one current log file (all-the-logs.log). When that reaches 10Mb in size, it will be renamed and compressed to all-the-logs.log.1.gz and a new file opened called all-the-logs.log. When all-the-logs.log reaches 10Mb again, then all-the-logs.log.1.gz will be renamed to all-the-logs.log.2.gz, and so on.\n * :::\n *\n * ## Example with date rolling\n *\n * ```typescript\n * import { Logger } from \"@tsed/logger\";\n * export const logger = new Logger(\"Log Example\");\n *\n * logger.appenders\n * .set('file', {\n *   type: 'file',\n *   filename: `${__dirname}/../logs/myfile.log`,\n *   pattern: '.yyyy-MM-dd'\n * });\n * ```\n *\n */\n@Appender({name: \"file\", defaultLayout: \"basic\"})\nexport class FileAppender extends BaseAppender {\n  private writer: any;\n  private listener: any;\n\n  /**\n   *\n   */\n  public reopen() {\n    return this.shutdown().then(() => {\n      this.build();\n    });\n  }\n\n  /**\n   *\n   */\n  public shutdown(): Promise<any> {\n    process.removeListener(\"SIGHUP\", this.listener);\n\n    return new Promise((resolve) => {\n      this.writer.end(\"\", \"utf-8\", resolve);\n    });\n  }\n\n  /**\n   *\n   * @param loggingEvent\n   */\n  public write(loggingEvent: LogEvent) {\n    this.writer.write(this.layout(loggingEvent, this.config.timezoneOffset) + eol, \"utf8\");\n  }\n\n  build() {\n    let {filename: file, maxLogSize: logSize, backups: numBackups, pattern} = this.config;\n\n    file = normalize(file!);\n    numBackups = numBackups === undefined ? 5 : numBackups;\n    // there has to be at least one backup if logSize has been specified\n    numBackups = numBackups === 0 ? 1 : numBackups;\n    this.config.maxSize = logSize; // this needs to be added as streamroller uses maxSize while tsed is using maxLogSize as logSize\n    this.writer = this.openTheStream(file, logSize, numBackups, pattern, this.config);\n    // On SIGHUP, close and reopen all files. This allows this appender to work with\n    // logrotate. Note that if you are using logrotate, you should not set\n    // `logSize`.\n    this.listener = () => this.reopen();\n\n    process.on(\"SIGHUP\", this.listener);\n  }\n\n  /**\n   *\n   * @param file\n   * @param fileSize\n   * @param numFiles\n   * @param pattern\n   * @param options\n   * @returns {streams.RollingFileStream}\n   */\n  private openTheStream(file: string, fileSize: number | undefined, numFiles: number, pattern: string | undefined, options: any) {\n    let stream = null;\n    if (pattern && fileSize && file) {\n      stream = new streams.RollingFileWriteStream(file, options); // Since the whole object is present in options, pattern would be taken from it.\n    } else if (pattern) {\n      stream = new streams.DateRollingFileStream(file, pattern, options);\n    } else {\n      stream = new streams.RollingFileStream(file, fileSize, numFiles, options);\n    }\n\n    stream.on(\"error\", (err: any) => {\n      console.error(\"FileAppender - Writing to file %s, error happened \", file, err);\n    });\n\n    return stream;\n  }\n}\n"]}