/// <reference types="node" />
import { BaseContext } from "@tsed/di";
import { Writable } from "stream";
export declare const PLATFORM_VIEWS_EXTENSIONS: {
    atpl: string;
    bracket: string;
    dot: string;
    dust: string;
    ect: string;
    ejs: string;
    haml: string;
    "haml-coffee": string;
    hamlet: string;
    hbs: string;
    handlebars: string;
    hogan: string;
    htmling: string;
    jazz: string;
    jqtpl: string;
    just: string;
    kernel: string;
    liquid: string;
    liquor: string;
    lodash: string;
    mote: string;
    mustache: string;
    nunjucks: string;
    plates: string;
    pug: string;
    qejs: string;
    ractive: string;
    razor: string;
    jsx: string;
    slm: string;
    squirelly: string;
    swig: string;
    teacup: string;
    templayed: string;
    twig: string;
    underscore: string;
    vash: string;
    velocityjs: string;
    walrus: string;
    whiskers: string;
};
export type PlatformViewsExtensionsTypes = Record<string, string>;
export interface PlatformViewsEngineOptions extends Record<string, unknown> {
    requires?: any;
}
export interface PlatformRenderOptions extends Record<string, unknown> {
    $ctx: BaseContext;
}
export interface PlatformViewWritableStream {
    pipe(stream: Writable): void;
}
export interface PlatformViewEngine {
    options: PlatformViewsEngineOptions;
    render(path: string, options: PlatformRenderOptions): Promise<string | PlatformViewWritableStream>;
}
export interface PlatformViewsSettings {
    disabled?: boolean;
    /**
     * Views directory.
     */
    root?: string;
    /**
     * Enable cache. Ts.ED enable cache in PRODUCTION profile by default.
     */
    cache?: boolean;
    /**
     * Provide extensions mapping to match the expected engines.
     */
    extensions?: Partial<PlatformViewsExtensionsTypes>;
    /**
     * Default view engine extension.
     * Allow omitting extension when using View decorator or render method.
     */
    viewEngine?: string;
    /**
     * Options mapping for each engine.
     */
    options?: Record<string, PlatformViewsEngineOptions>;
}
declare global {
    namespace TsED {
        interface Configuration {
            /**
             * Object to configure Views engines with Consolidate. See more on [View engine](/docs/template-engine.md).
             */
            views: PlatformViewsSettings;
        }
    }
}
