"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonDeserializer = void 0;
const core_1 = require("@tsed/core");
const schema_1 = require("@tsed/schema");
const alterAfterDeserialize_1 = require("../hooks/alterAfterDeserialize");
const alterBeforeDeserialize_1 = require("../hooks/alterBeforeDeserialize");
const alterOnDeserialize_1 = require("../hooks/alterOnDeserialize");
const JsonMapperCompiler_1 = require("./JsonMapperCompiler");
const JsonMapperSettings_1 = require("./JsonMapperSettings");
const JsonMapperTypesContainer_1 = require("./JsonMapperTypesContainer");
const Writer_1 = require("./Writer");
function isDeserializable(obj, options) {
    if ((!!options.collectionType && (0, core_1.isNil)(obj)) || obj === undefined) {
        return false;
    }
    return !((0, core_1.isEmpty)(options.type) || (options.type === Object && !options.collectionType));
}
function varKey(k) {
    return `__${k}`;
}
function mapParamStoreOptions(store, options) {
    return {
        ...options,
        store: undefined,
        type: store.getBestType(),
        collectionType: store.collectionType,
        groups: store.parameter.groups,
        // genericTypes: store.nestedGenerics[0],
        generics: store.nestedGenerics
    };
}
function getGenericIndex(propertyStore) {
    return propertyStore.parent.schema.genericLabels.indexOf(propertyStore.itemSchema.genericType);
}
class JsonDeserializer extends JsonMapperCompiler_1.JsonMapperCompiler {
    /**
     * Cached classes by his id
     * @protected
     */
    constructors = {};
    constructor() {
        super();
        this.addGlobal("newInstanceOf", this.newInstanceOf.bind(this));
        this.addGlobal("alterBeforeDeserialize", this.alterBeforeDeserialize.bind(this));
        this.addGlobal("alterAfterDeserialize", this.alterAfterDeserialize.bind(this));
        this.addTypeMapper(Object, this.mapObject.bind(this));
        this.addTypeMapper(Array, this.mapArray.bind(this));
        this.addTypeMapper(Map, this.mapMap.bind(this));
        this.addTypeMapper(Set, this.mapSet.bind(this));
        this.addTypeMapper("ObjectId", (value) => String(value));
    }
    map(input, options = {}) {
        options = this.mapOptions(options);
        if (!isDeserializable(input, options)) {
            return input;
        }
        if (!options.collectionType && (0, core_1.isArray)(input)) {
            options.collectionType = Array;
        }
        const model = options.type || (0, core_1.classOf)(input);
        const mapper = this.compile(model, options.groups);
        if (options.collectionType) {
            const collectionMapper = this.compile(options.collectionType, options.groups);
            return collectionMapper.fn(input, { ...options, id: mapper.id });
        }
        return mapper.fn(input, this.createContext(options));
    }
    compile(model, groups) {
        if ([WeakMap, WeakSet].includes(model)) {
            throw new Error(`${(0, core_1.nameOf)(model)} is not supported by JsonMapper.`);
        }
        return super.compile(model, groups);
    }
    eval(mapper, { id, groupsId, model }) {
        this.constructors[id] = model;
        return super.eval(mapper, { id, groupsId, model });
    }
    newInstanceOf(id, obj, options) {
        try {
            return new this.constructors[id](options.disableUnsecureConstructor ? {} : obj);
        }
        catch (er) {
            return obj;
        }
    }
    createMapper(model, id, groups) {
        const entity = schema_1.JsonEntityStore.from(model);
        const properties = new Set();
        const schemaProperties = [...(0, schema_1.getPropertiesStores)(entity).values()];
        const writer = new Writer_1.Writer().arrow("input", "options");
        writer.if("isNil(input)").return("input");
        if (entity.schema.hasDiscriminator) {
            writer.add(this.mapDiscriminator(entity, groups));
        }
        // pre hook
        if (entity.schema.$hooks?.has("beforeDeserialize")) {
            this.schemes[id] = entity.schema;
            writer.set("input", `alterBeforeDeserialize('${id}', input, options)`);
        }
        // generics and options
        writer.const("generics", "options.generics[0]");
        if (entity.schema.genericLabels?.length) {
            writer.set("options", "{...options, self: input, generics: [...options.generics].slice(1)}");
        }
        else {
            writer.set("options", "{...options, self: input}");
        }
        writer.const("obj", `newInstanceOf('${id}', input, options)`);
        // properties
        writer.add(...schemaProperties.flatMap((propertyStore) => {
            const key = propertyStore.propertyName;
            // TODO V8 add this line: properties.add(key as string);
            properties.add(String(propertyStore.parent.schema.getAliasOf(key) || key));
            if ((propertyStore.schema?.$ignore && (0, core_1.isBoolean)(propertyStore.schema?.$ignore)) ||
                propertyStore.isGetterOnly() ||
                (propertyStore.schema?.$hooks?.has("groups") && this.alterGroups(propertyStore.schema, groups))) {
                return;
            }
            return this.mapProperty(propertyStore, id, groups);
        }));
        // additional properties
        writer.add(this.mapAdditionalProperties(entity, properties, groups));
        // post hook
        if (entity.schema.$hooks?.has("afterDeserialize")) {
            this.schemes[id] = entity.schema;
            return writer.return(`alterAfterDeserialize('${id}', obj, options)`).root().toString();
        }
        return writer.return("obj").root().toString();
    }
    alterValue(schemaId, value, options) {
        return (0, alterOnDeserialize_1.alterOnDeserialize)(this.schemes[schemaId], value, options);
    }
    mapDiscriminator(entity, groups) {
        const writer = new Writer_1.Writer();
        const discriminator = entity.schema.discriminator();
        const sw = writer.switch(`input['${discriminator.propertyName}']`);
        discriminator.values.forEach((value, kind) => {
            const nestedMapper = this.compile(value, groups);
            sw.case(`'${kind}'`).returnCallMapper(nestedMapper.id, "input");
        });
        return writer;
    }
    mapProperty(propertyStore, id, groups) {
        const key = String(propertyStore.propertyKey);
        const aliasKey = String(propertyStore.parent.schema.getAliasOf(key) || key);
        const schemaId = this.getSchemaId(id, key);
        const format = propertyStore.itemSchema.get("format");
        const formatOpts = format && `options: {format: '${format}'}`;
        let writer = new Writer_1.Writer().add(`// Map ${key} ${id} ${groups || ""}`);
        const pick = key !== aliasKey ? `options.useAlias ? '${aliasKey}' : '${key}'` : `'${key}'`;
        // ignore hook (deprecated)
        if (propertyStore.schema?.$hooks?.has("ignore")) {
            this.schemes[schemaId] = propertyStore.schema;
            writer = writer.if(`!alterIgnore('${schemaId}', {...options, self: input})`);
        }
        // pre hook
        const hasDeserializer = propertyStore.schema?.$hooks?.has("onDeserialize");
        let getter = `input[${pick}]`;
        if (hasDeserializer) {
            this.schemes[schemaId] = propertyStore.schema;
            const opts = Writer_1.Writer.options(formatOpts);
            getter = `alterValue('${schemaId}', input[${pick}], ${opts})`;
        }
        const ifWriter = writer.set(`let ${varKey(key)}`, getter).if(`${varKey(key)} !== undefined`);
        const fill = this.getPropertyFiller(propertyStore, id, groups, formatOpts);
        if (hasDeserializer) {
            fill(ifWriter.if(`${varKey(key)} === input.${key}`));
        }
        else {
            fill(ifWriter);
        }
        ifWriter.set(`obj.${key}`, varKey(key));
        if (groups && groups.includes("partial")) {
            ifWriter.else().add(`delete obj.${key}`);
        }
        return writer.root();
    }
    getPropertyFiller(propertyStore, id, groups, formatOpts) {
        const key = String(propertyStore.propertyKey);
        const schemaId = this.getSchemaId(id, key);
        const generics = propertyStore.itemSchema.nestedGenerics;
        const isGeneric = propertyStore.itemSchema.isGeneric && !generics?.length;
        if (isGeneric) {
            const index = getGenericIndex(propertyStore);
            const opts = Writer_1.Writer.options(formatOpts, `type: generics[${index}]`);
            return (writer) => writer.set(varKey(key), `compileAndMap(${varKey(key)}, ${opts})`);
        }
        const type = propertyStore.itemSchema.hasDiscriminator ? propertyStore.itemSchema.discriminator().base : propertyStore.getBestType();
        const nestedMapper = this.compile(type, groups);
        if (propertyStore.isCollection) {
            return (writer) => writer.callMapper((0, core_1.nameOf)(propertyStore.collectionType), varKey(key), `id: '${nestedMapper.id}'`, formatOpts);
        }
        if (generics?.length) {
            this.schemes[schemaId] = propertyStore.schema;
            return (writer) => writer.callMapper(nestedMapper.id, varKey(key), formatOpts, `generics: schemes['${schemaId}'].nestedGenerics`);
        }
        return (writer) => writer.callMapper(nestedMapper.id, varKey(key), formatOpts);
    }
    mapOptions({ groups, useAlias = true, types, ...options }) {
        if (options.store instanceof schema_1.JsonParameterStore) {
            return this.mapOptions(mapParamStoreOptions(options.store, options));
        }
        const customMappers = {};
        types = types || (0, JsonMapperTypesContainer_1.getJsonMapperTypes)();
        types.forEach((mapper, model) => {
            if (![Array, Set, Map].includes(model)) {
                const typeName = (0, core_1.nameOf)(model);
                if ((0, core_1.nameOf)(model) in mapper) {
                    this.addTypeMapper(model, mapper[typeName].bind(mapper));
                }
                else {
                    this.addTypeMapper(model, (value, options) => mapper.deserialize(value, {
                        ...options,
                        type: model
                    }));
                }
            }
        });
        const strictGroups = options.strictGroups ?? JsonMapperSettings_1.JsonMapperSettings.strictGroups;
        return {
            ...options,
            additionalProperties: options.additionalProperties ?? JsonMapperSettings_1.JsonMapperSettings.additionalProperties,
            disableUnsecureConstructor: options.disableUnsecureConstructor ?? JsonMapperSettings_1.JsonMapperSettings.disableUnsecureConstructor,
            groups: groups === undefined ? (strictGroups ? [] : false) : groups || false,
            useAlias,
            customMappers,
            generics: options.generics || []
        };
    }
    mapAdditionalProperties(entity, properties, groups) {
        const additionalProperties = entity.schema.get("additionalProperties");
        const exclude = [...properties.values()].map((key) => `'${key}'`).join(", ");
        const writer = new Writer_1.Writer();
        writer.add("// add additional properties");
        let each = writer.each("objectKeys(input)", ["key"]);
        if (exclude.length) {
            each = each.if(`![${exclude}].includes(key)`);
        }
        if ((0, core_1.isClass)(additionalProperties)) {
            const nestedMapper = this.compile(additionalProperties.getComputedType(), groups);
            each.set("obj[key]", Writer_1.Writer.mapper(nestedMapper.id, "input[key]", "options"));
            return writer;
        }
        if (additionalProperties) {
            each.set("obj[key]", "input[key]");
            return writer;
        }
        // dynamic additional properties options
        each.if(`options.additionalProperties && obj[key] === undefined`).set("obj[key]", "input[key]");
        return writer;
    }
    mapObject(input, options) {
        return input;
    }
    mapSet(input, options) {
        if ((0, core_1.isNil)(input)) {
            return input;
        }
        const obj = new Set();
        (0, core_1.objectKeys)(input).forEach((key) => {
            obj.add(this.mapItem(input[key], options));
        });
        return obj;
    }
    mapArray(input, options) {
        if ((0, core_1.isNil)(input)) {
            return input;
        }
        return [].concat(input).map((item) => {
            return this.mapItem(item, options);
        });
    }
    mapMap(input, options) {
        if ((0, core_1.isNil)(input)) {
            return input;
        }
        const obj = new Map();
        (0, core_1.objectKeys)(input).forEach((key) => {
            obj.set(key, this.mapItem(input[key], options));
        });
        return obj;
    }
    mapItem(input, { id, ...options }) {
        return this.execMapper(id, input, options);
    }
    alterBeforeDeserialize(schemaId, value, options) {
        return (0, alterBeforeDeserialize_1.alterBeforeDeserialize)(value, this.schemes[schemaId], options);
    }
    alterAfterDeserialize(schemaId, value, options) {
        return (0, alterAfterDeserialize_1.alterAfterDeserialize)(value, this.schemes[schemaId], options);
    }
}
exports.JsonDeserializer = JsonDeserializer;
//# sourceMappingURL=JsonDeserializer.js.map