"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrimitiveMapper = exports.CastError = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const jsonMapper_1 = require("../decorators/jsonMapper");
function isNullish(data) {
    return [null, "null"].includes(data);
}
class CastError extends Error {
    name = "CAST_ERROR";
    constructor(message) {
        super(`Cast error. ${message}`);
    }
}
exports.CastError = CastError;
/**
 * Mapper for the `String`, `Number`, `BigInt` and `Boolean` types.
 * @jsonmapper
 * @component
 */
let PrimitiveMapper = class PrimitiveMapper {
    deserialize(data, ctx) {
        return this[(0, core_1.nameOf)(ctx.type)] ? this[(0, core_1.nameOf)(ctx.type)](data, ctx) : undefined;
    }
    serialize(object, ctx) {
        return this[(0, core_1.nameOf)(ctx?.type)] && typeof object !== "object" ? this[(0, core_1.nameOf)(ctx.type)](object, ctx) : object;
    }
    String(data) {
        return data === null ? null : "" + data;
    }
    Boolean(data) {
        if (["true", "1", true].includes(data))
            return true;
        if (["false", "0", false].includes(data))
            return false;
        if (isNullish(data))
            return null;
        if (data === undefined)
            return undefined;
        return !!data;
    }
    Number(data) {
        if (isNullish(data))
            return null;
        if (data === undefined)
            return data;
        const n = +data;
        if (isNaN(n)) {
            throw new CastError("Expression value is not a number.");
        }
        return n;
    }
    BigInt(data) {
        if (isNullish(data))
            return null;
        return BigInt(data);
    }
};
PrimitiveMapper = tslib_1.__decorate([
    (0, jsonMapper_1.JsonMapper)(String, Number, Boolean, BigInt)
], PrimitiveMapper);
exports.PrimitiveMapper = PrimitiveMapper;
//# sourceMappingURL=PrimitiveMapper.js.map