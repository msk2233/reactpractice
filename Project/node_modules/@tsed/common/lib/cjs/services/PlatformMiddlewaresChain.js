"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformMiddlewaresChain = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
const platform_params_1 = require("@tsed/platform-params");
const schema_1 = require("@tsed/schema");
const PlatformAcceptMimesMiddleware_1 = require("../middlewares/PlatformAcceptMimesMiddleware");
const PlatformMulterMiddleware_1 = require("../middlewares/PlatformMulterMiddleware");
const PlatformAdapter_1 = require("../services/PlatformAdapter");
let PlatformMiddlewaresChain = class PlatformMiddlewaresChain {
    acceptMimes;
    adapter;
    injector;
    get(handlers, operationRoute) {
        const { ACCEPT_MIMES, FILE } = this.getParamTypes(handlers, operationRoute);
        return {
            ...handlers,
            before: [ACCEPT_MIMES && PlatformAcceptMimesMiddleware_1.PlatformAcceptMimesMiddleware, ...handlers.before, FILE && PlatformMulterMiddleware_1.PlatformMulterMiddleware].filter(Boolean)
        };
    }
    hasAcceptMimes(operationRoute) {
        return operationRoute.endpoint.acceptMimes.length || this.acceptMimes.length;
    }
    getParamTypes(middlewares, operationRoute) {
        return middlewares.before
            .concat(middlewares.after)
            .filter(core_1.isClass)
            .reduce((paramTypes, token) => {
            const entity = schema_1.JsonEntityStore.fromMethod(token, "use");
            if (entity.decoratorType === "method") {
                const { FILE, RAW_BODY, BODY } = entity.getParamTypes();
                paramTypes.FILE = paramTypes.FILE || FILE;
                paramTypes.RAW_BODY = paramTypes.RAW_BODY || RAW_BODY;
                paramTypes.BODY = paramTypes.BODY || BODY;
            }
            return paramTypes;
        }, {
            ACCEPT_MIMES: this.hasAcceptMimes(operationRoute),
            FILE: operationRoute.has(platform_params_1.ParamTypes.FILES),
            RAW_BODY: operationRoute.has(platform_params_1.ParamTypes.RAW_BODY),
            BODY: operationRoute.has(platform_params_1.ParamTypes.BODY) || operationRoute.method === "ALL"
        });
    }
};
tslib_1.__decorate([
    (0, di_1.Constant)("acceptMimes", []),
    tslib_1.__metadata("design:type", Array)
], PlatformMiddlewaresChain.prototype, "acceptMimes", void 0);
tslib_1.__decorate([
    (0, di_1.Inject)(PlatformAdapter_1.PlatformAdapter),
    tslib_1.__metadata("design:type", PlatformAdapter_1.PlatformAdapter)
], PlatformMiddlewaresChain.prototype, "adapter", void 0);
tslib_1.__decorate([
    (0, di_1.Inject)(di_1.InjectorService),
    tslib_1.__metadata("design:type", di_1.InjectorService)
], PlatformMiddlewaresChain.prototype, "injector", void 0);
PlatformMiddlewaresChain = tslib_1.__decorate([
    (0, di_1.Injectable)()
], PlatformMiddlewaresChain);
exports.PlatformMiddlewaresChain = PlatformMiddlewaresChain;
//# sourceMappingURL=PlatformMiddlewaresChain.js.map