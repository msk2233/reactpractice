"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Platform = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@tsed/di");
const platform_router_1 = require("@tsed/platform-router");
const PlatformApplication_1 = require("./PlatformApplication");
const PlatformHandler_1 = require("./PlatformHandler");
/**
 * `Platform` is used to provide all routes collected by annotation `@Controller`.
 *
 * @platform
 */
let Platform = class Platform {
    injector;
    platformApplication;
    platformRouters;
    #layers;
    constructor(injector, platformApplication, platformRouters) {
        this.injector = injector;
        this.platformApplication = platformApplication;
        this.platformRouters = platformRouters;
        platformRouters.prebuild();
    }
    get app() {
        return this.platformApplication;
    }
    addRoutes(routes) {
        routes.forEach((routeSettings) => {
            this.addRoute(routeSettings.route, routeSettings.token);
        });
    }
    addRoute(route, token) {
        const provider = this.injector.getProvider(token);
        if (!provider || provider.hasParent()) {
            return this;
        }
        const router = this.platformRouters.from(provider.token);
        this.app.use(route, router);
        return this;
    }
    getLayers() {
        this.#layers = this.#layers || this.platformRouters.getLayers(this.app);
        return this.#layers;
    }
    /**
     * Get all controllers mounted on the application.
     * @returns  {RouteController[]}
     */
    getMountedControllers() {
        const controllers = this.getLayers().reduce((controllers, layer) => {
            if (layer.isProvider()) {
                const route = String(layer.getBasePath());
                const key = `${layer.provider.toString()}:${route}`;
                if (!controllers.has(key)) {
                    controllers.set(key, {
                        route,
                        routes: new Set(),
                        provider: layer.provider
                    });
                }
                controllers.get(key).routes.add(String(layer.path));
            }
            return controllers;
        }, new Map());
        return [...controllers.values()];
    }
};
Platform = tslib_1.__decorate([
    (0, di_1.Injectable)({
        scope: di_1.ProviderScope.SINGLETON,
        imports: [PlatformHandler_1.PlatformHandler]
    }),
    tslib_1.__metadata("design:paramtypes", [di_1.InjectorService,
        PlatformApplication_1.PlatformApplication,
        platform_router_1.PlatformRouters])
], Platform);
exports.Platform = Platform;
//# sourceMappingURL=Platform.js.map