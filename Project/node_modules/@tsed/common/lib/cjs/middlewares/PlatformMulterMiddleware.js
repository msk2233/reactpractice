"use strict";
var PlatformMulterMiddleware_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformMulterMiddleware = exports.MulterException = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@tsed/di");
const exceptions_1 = require("@tsed/exceptions");
const platform_middlewares_1 = require("@tsed/platform-middlewares");
const platform_params_1 = require("@tsed/platform-params");
const PlatformContext_1 = require("../domain/PlatformContext");
const PlatformApplication_1 = require("../services/PlatformApplication");
class MulterException extends exceptions_1.BadRequest {
    constructor(er) {
        super(er.message);
        this.origin = er;
        this.name = er.code;
    }
}
exports.MulterException = MulterException;
/**
 * @middleware
 */
let PlatformMulterMiddleware = PlatformMulterMiddleware_1 = class PlatformMulterMiddleware {
    settings;
    app;
    async use(ctx) {
        try {
            const { fields, options = {} } = ctx.endpoint.get(PlatformMulterMiddleware_1);
            const settings = {
                ...this.settings,
                ...options
            };
            /* istanbul ignore next */
            if (settings.storage) {
                delete settings.dest;
            }
            const middleware = this.app.multer(settings).fields(this.getFields({ fields }));
            return await middleware(ctx.getRequest(), ctx.getResponse());
        }
        catch (er) {
            if (er.code) {
                throw new MulterException(er);
            }
            throw er;
        }
    }
    getFields(conf) {
        return conf.fields.map(({ name, maxCount }) => ({ name, maxCount }));
    }
};
tslib_1.__decorate([
    (0, di_1.Value)("multer", {}) // NOTE: don't use constant to getting multer configuration. See issue #1840
    ,
    tslib_1.__metadata("design:type", Object)
], PlatformMulterMiddleware.prototype, "settings", void 0);
tslib_1.__decorate([
    (0, di_1.Inject)(),
    tslib_1.__metadata("design:type", PlatformApplication_1.PlatformApplication)
], PlatformMulterMiddleware.prototype, "app", void 0);
tslib_1.__decorate([
    tslib_1.__param(0, (0, platform_params_1.Context)()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [PlatformContext_1.PlatformContext]),
    tslib_1.__metadata("design:returntype", Promise)
], PlatformMulterMiddleware.prototype, "use", null);
PlatformMulterMiddleware = PlatformMulterMiddleware_1 = tslib_1.__decorate([
    (0, platform_middlewares_1.Middleware)({
        priority: 10
    })
], PlatformMulterMiddleware);
exports.PlatformMulterMiddleware = PlatformMulterMiddleware;
//# sourceMappingURL=PlatformMulterMiddleware.js.map