"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformAcceptMimesMiddleware = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
const exceptions_1 = require("@tsed/exceptions");
const platform_middlewares_1 = require("@tsed/platform-middlewares");
const platform_params_1 = require("@tsed/platform-params");
/**
 * @middleware
 * @platform
 */
let PlatformAcceptMimesMiddleware = class PlatformAcceptMimesMiddleware {
    acceptMimes;
    use(ctx) {
        const { endpoint, request } = ctx;
        const mimes = (0, core_1.uniq)((endpoint?.get("acceptMimes") || []).concat(this.acceptMimes));
        if (mimes.length && !request.accepts(mimes)) {
            throw new exceptions_1.NotAcceptable(mimes.join(", "));
        }
    }
};
tslib_1.__decorate([
    (0, di_1.Constant)("acceptMimes", []),
    tslib_1.__metadata("design:type", Array)
], PlatformAcceptMimesMiddleware.prototype, "acceptMimes", void 0);
tslib_1.__decorate([
    tslib_1.__param(0, (0, platform_params_1.Context)()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], PlatformAcceptMimesMiddleware.prototype, "use", null);
PlatformAcceptMimesMiddleware = tslib_1.__decorate([
    (0, platform_middlewares_1.Middleware)({
        priority: -10
    })
], PlatformAcceptMimesMiddleware);
exports.PlatformAcceptMimesMiddleware = PlatformAcceptMimesMiddleware;
//# sourceMappingURL=PlatformAcceptMimesMiddleware.js.map