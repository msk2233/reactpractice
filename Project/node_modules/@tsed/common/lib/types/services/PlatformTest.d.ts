/// <reference types="node" />
import { Type } from "@tsed/core";
import { DITest, InjectorService } from "@tsed/di";
import type { IncomingMessage, RequestListener, ServerResponse } from "http";
import { PlatformContext, PlatformContextOptions } from "../domain/PlatformContext";
import { PlatformAdapter, PlatformBuilderSettings } from "./PlatformAdapter";
/**
 * @platform
 */
export declare class PlatformTest extends DITest {
    static adapter: Type<PlatformAdapter>;
    static create(settings?: Partial<TsED.Configuration>): Promise<void>;
    /**
     * Create a new injector with the right default services
     */
    static createInjector(settings?: any): InjectorService;
    /**
     * Load the server silently without listening port and configure it on test profile.
     * @decorator
     * @param mod
     * @param listen
     * @param settings
     * @returns {Promise<void>}
     */
    static bootstrap(mod: any, { listen, ...settings }?: Partial<PlatformBuilderSettings & {
        listen: boolean;
    }>): () => Promise<void>;
    /**
     * It injects services into the test function where you can alter, spy on, and manipulate them.
     *
     * The inject function has two parameters
     *
     * * an array of Service dependency injection tokens,
     * * a test function whose parameters correspond exactly to each item in the injection token array.
     *
     * @param targets
     * @param func
     */
    static inject<T>(targets: any[], func: (...args: any[]) => Promise<T> | T): () => Promise<T>;
    /**
     * Return the raw application (express or koa).
     * Use this callback with SuperTest.
     *
     * ```typescript
     * let request: SuperTest.Agent;
     * beforeEach(PlatformTest.bootstrap(Server, {
     *   mount: {
     *     "/rest": [ProductsController]
     *   }
     * }));
     * beforeEach(() => {
     *   request = SuperTest(PlatformTest.callback());
     * });
     * ```
     */
    static callback(): RequestListener<typeof IncomingMessage, typeof ServerResponse>;
    static createRequest(options?: any): any;
    static createResponse(options?: any): any;
    static createRequestContext(options?: Partial<PlatformContextOptions & any>): PlatformContext<import("./PlatformRequest").PlatformRequest<any>, import("./PlatformResponse").PlatformResponse<any>>;
}
