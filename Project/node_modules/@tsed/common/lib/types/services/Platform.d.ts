import { InjectorService, TokenProvider } from "@tsed/di";
import { PlatformLayer, PlatformRouters } from "@tsed/platform-router";
import { Route, RouteController } from "../interfaces/Route";
import { PlatformApplication } from "./PlatformApplication";
/**
 * `Platform` is used to provide all routes collected by annotation `@Controller`.
 *
 * @platform
 */
export declare class Platform {
    #private;
    readonly injector: InjectorService;
    readonly platformApplication: PlatformApplication;
    readonly platformRouters: PlatformRouters;
    constructor(injector: InjectorService, platformApplication: PlatformApplication, platformRouters: PlatformRouters);
    get app(): PlatformApplication<TsED.Application>;
    addRoutes(routes: Route[]): void;
    addRoute(route: string, token: TokenProvider): this;
    getLayers(): PlatformLayer[];
    /**
     * Get all controllers mounted on the application.
     * @returns  {RouteController[]}
     */
    getMountedControllers(): RouteController[];
}
