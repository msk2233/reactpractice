/// <reference types="node" />
import { Type } from "@tsed/core";
import { InjectorService, ProviderOpts } from "@tsed/di";
import { PlatformContextHandler, PlatformHandlerMetadata, PlatformLayer } from "@tsed/platform-router";
import { IncomingMessage, ServerResponse } from "http";
import { PlatformMulter, PlatformMulterSettings } from "../config/interfaces/PlatformMulterSettings";
import { PlatformStaticsOptions } from "../config/interfaces/PlatformStaticsSettings";
import { PlatformContext } from "../domain/PlatformContext";
import { CreateServerReturn } from "../utils/createServer";
import type { PlatformApplication } from "./PlatformApplication";
export declare abstract class PlatformAdapter<App = TsED.Application> {
    protected injector: InjectorService;
    static readonly NAME: string;
    /**
     * Load providers in top priority
     */
    providers: ProviderOpts[];
    constructor(injector: InjectorService);
    get app(): PlatformApplication<App>;
    getServers(): CreateServerReturn[];
    onInit(): Promise<void> | void;
    beforeLoadRoutes(): Promise<void> | void;
    afterLoadRoutes(): Promise<void> | void;
    /**
     * create initial context
     */
    abstract useContext(): any;
    /**
     * Map router layer to the targeted framework
     */
    abstract mapLayers(layer: PlatformLayer[]): void;
    /**
     * Map handler to the targeted framework
     */
    abstract mapHandler(handler: Function, layer: PlatformHandlerMetadata): Function;
    /**
     * Return the app instance
     */
    abstract createApp(): {
        app: App;
        callback(): (req: IncomingMessage, res: ServerResponse) => void;
    };
    /**
     * Return the statics middlewares
     * @param endpoint
     * @param options
     */
    abstract statics(endpoint: string, options: PlatformStaticsOptions): any;
    /**
     * Return the multipart middleware
     * @param options
     */
    abstract multipart(options: PlatformMulterSettings): PlatformMulter;
    /**
     * Return the body parser for the given
     * @param type
     * @param opts
     */
    abstract bodyParser(type: string, opts?: Record<string, any>): any;
}
export interface PlatformBuilderSettings<App = TsED.Application> extends Partial<TsED.Configuration> {
    adapter?: Type<PlatformAdapter<App>>;
}
export declare class FakeAdapter extends PlatformAdapter<any> {
    providers: ProviderOpts[];
    static readonly NAME: string;
    static createFakeRawDriver(): {
        (): void;
        use: () => any;
        all: () => any;
        get: () => any;
        patch: () => any;
        post: () => any;
        put: () => any;
        head: () => any;
        delete: () => any;
        options: () => any;
    };
    createApp(): {
        app: any;
        callback(): any;
    };
    multipart(options: PlatformMulterSettings): PlatformMulter;
    statics(endpoint: string, options: PlatformStaticsOptions): any;
    bodyParser(type: string): any;
    mapLayers(layers: PlatformLayer[]): void;
    mapHandler(handler: PlatformContextHandler<PlatformContext>): PlatformContextHandler<PlatformContext<import("./PlatformRequest").PlatformRequest<any>, import("./PlatformResponse").PlatformResponse<any>>>;
    useContext(): void;
}
