import { InjectorService, registerProvider } from "@tsed/di";
import { createHttpServer } from "../utils/createHttpServer.js";
import { createHttpsServer } from "../utils/createHttpsServer.js";
export class PlatformAdapter {
    injector;
    static NAME;
    /**
     * Load providers in top priority
     */
    providers;
    constructor(injector) {
        this.injector = injector;
    }
    get app() {
        return this.injector.get("PlatformApplication");
    }
    getServers() {
        return [createHttpServer(this.injector, this.app.callback()), createHttpsServer(this.injector, this.app.callback())].filter(Boolean);
    }
    onInit() {
        return Promise.resolve();
    }
    beforeLoadRoutes() {
        return Promise.resolve();
    }
    afterLoadRoutes() {
        return Promise.resolve();
    }
}
export class FakeAdapter extends PlatformAdapter {
    providers = [];
    static NAME = "FAKE_ADAPTER";
    static createFakeRawDriver() {
        // istanbul ignore next
        function FakeRawDriver() { }
        // istanbul ignore next
        function use() {
            return this;
        }
        FakeRawDriver.use = use;
        FakeRawDriver.all = use;
        FakeRawDriver.get = use;
        FakeRawDriver.patch = use;
        FakeRawDriver.post = use;
        FakeRawDriver.put = use;
        FakeRawDriver.head = use;
        FakeRawDriver.delete = use;
        FakeRawDriver.options = use;
        return FakeRawDriver;
    }
    createApp() {
        const app = FakeAdapter.createFakeRawDriver();
        return {
            app,
            callback() {
                return app;
            }
        };
    }
    multipart(options) {
        return {};
    }
    statics(endpoint, options) {
        return {};
    }
    bodyParser(type) {
        return () => { };
    }
    mapLayers(layers) { }
    mapHandler(handler) {
        return handler;
    }
    useContext() { }
}
registerProvider({
    provide: PlatformAdapter,
    deps: [InjectorService],
    useClass: FakeAdapter
});
//# sourceMappingURL=PlatformAdapter.js.map