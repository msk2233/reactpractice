import { __decorate, __metadata } from "tslib";
import { isClass } from "@tsed/core";
import { Constant, Inject, Injectable, InjectorService } from "@tsed/di";
import { ParamTypes } from "@tsed/platform-params";
import { JsonEntityStore } from "@tsed/schema";
import { PlatformAcceptMimesMiddleware } from "../middlewares/PlatformAcceptMimesMiddleware.js";
import { PlatformMulterMiddleware } from "../middlewares/PlatformMulterMiddleware.js";
import { PlatformAdapter } from "../services/PlatformAdapter.js";
let PlatformMiddlewaresChain = class PlatformMiddlewaresChain {
    acceptMimes;
    adapter;
    injector;
    get(handlers, operationRoute) {
        const { ACCEPT_MIMES, FILE } = this.getParamTypes(handlers, operationRoute);
        return {
            ...handlers,
            before: [ACCEPT_MIMES && PlatformAcceptMimesMiddleware, ...handlers.before, FILE && PlatformMulterMiddleware].filter(Boolean)
        };
    }
    hasAcceptMimes(operationRoute) {
        return operationRoute.endpoint.acceptMimes.length || this.acceptMimes.length;
    }
    getParamTypes(middlewares, operationRoute) {
        return middlewares.before
            .concat(middlewares.after)
            .filter(isClass)
            .reduce((paramTypes, token) => {
            const entity = JsonEntityStore.fromMethod(token, "use");
            if (entity.decoratorType === "method") {
                const { FILE, RAW_BODY, BODY } = entity.getParamTypes();
                paramTypes.FILE = paramTypes.FILE || FILE;
                paramTypes.RAW_BODY = paramTypes.RAW_BODY || RAW_BODY;
                paramTypes.BODY = paramTypes.BODY || BODY;
            }
            return paramTypes;
        }, {
            ACCEPT_MIMES: this.hasAcceptMimes(operationRoute),
            FILE: operationRoute.has(ParamTypes.FILES),
            RAW_BODY: operationRoute.has(ParamTypes.RAW_BODY),
            BODY: operationRoute.has(ParamTypes.BODY) || operationRoute.method === "ALL"
        });
    }
};
__decorate([
    Constant("acceptMimes", []),
    __metadata("design:type", Array)
], PlatformMiddlewaresChain.prototype, "acceptMimes", void 0);
__decorate([
    Inject(PlatformAdapter),
    __metadata("design:type", PlatformAdapter)
], PlatformMiddlewaresChain.prototype, "adapter", void 0);
__decorate([
    Inject(InjectorService),
    __metadata("design:type", InjectorService)
], PlatformMiddlewaresChain.prototype, "injector", void 0);
PlatformMiddlewaresChain = __decorate([
    Injectable()
], PlatformMiddlewaresChain);
export { PlatformMiddlewaresChain };
//# sourceMappingURL=PlatformMiddlewaresChain.js.map