import { __decorate, __metadata } from "tslib";
import { Injectable, InjectorService, ProviderScope } from "@tsed/di";
import { PlatformRouter } from "@tsed/platform-router";
import { PlatformAdapter } from "./PlatformAdapter.js";
/**
 * `PlatformApplication` is used to provide all routes collected by annotation `@Controller`.
 *
 * @platform
 */
let PlatformApplication = class PlatformApplication extends PlatformRouter {
    adapter;
    injector;
    rawApp;
    rawCallback;
    constructor(adapter, injector) {
        super(injector);
        this.adapter = adapter;
        this.injector = injector;
        const { app, callback } = adapter.createApp();
        this.rawApp = app;
        this.rawCallback = callback;
    }
    getApp() {
        return this.rawApp;
    }
    multer(options) {
        return this.adapter.multipart(options);
    }
    callback(req, res) {
        if (req && res) {
            return this.callback()(req, res);
        }
        return this.rawCallback();
    }
};
PlatformApplication = __decorate([
    Injectable({
        scope: ProviderScope.SINGLETON,
        alias: "PlatformApplication"
    }),
    __metadata("design:paramtypes", [PlatformAdapter, InjectorService])
], PlatformApplication);
export { PlatformApplication };
//# sourceMappingURL=PlatformApplication.js.map