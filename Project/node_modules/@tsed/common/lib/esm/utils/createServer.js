import { getHostInfoFromPort } from "@tsed/core";
import { ProviderScope } from "@tsed/di";
import { listenServer } from "./listenServer.js";
export function createServer(injector, { token, type, port, server: get, listen }) {
    const { settings } = injector;
    const server = port !== false ? get() : null;
    injector.addProvider(token, {
        scope: ProviderScope.SINGLETON,
        useValue: server
    });
    injector.invoke(token);
    if (server) {
        const hostInfo = getHostInfoFromPort(type, port);
        return async () => {
            const url = `${hostInfo.protocol}://${hostInfo.address}:${port}`;
            injector.logger.debug(`Start server on ${url}`);
            await (listen ? listen(hostInfo) : listenServer(server, hostInfo));
            const address = server.address();
            if (address && typeof address !== "string") {
                hostInfo.address = address.address;
                hostInfo.port = address.port;
            }
            injector.logger.info(`Listen server on ${hostInfo.toString()}`);
            settings.set(`${type}Port`, `${hostInfo.address}:${hostInfo.port}`);
            return server;
        };
    }
}
//# sourceMappingURL=createServer.js.map