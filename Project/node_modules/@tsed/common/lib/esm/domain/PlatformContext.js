import { DIContext } from "@tsed/di";
import { PlatformApplication } from "../services/PlatformApplication.js";
import { PlatformRequest } from "../services/PlatformRequest.js";
import { PlatformResponse } from "../services/PlatformResponse.js";
export class PlatformContext extends DIContext {
    event;
    /**
     * The data return by the previous endpoint if you use multiple handler on the same route. By default data is empty.
     */
    data;
    /**
     * The error caught by the current handler
     */
    error;
    /**
     *
     */
    next;
    /**
     * The current @@PlatformResponse@@.
     */
    response;
    /**
     * The current @@PlatformRequest@@.
     */
    request;
    /**
     * The current @@EndpointMetadata@@ resolved by Ts.ED during the request.
     */
    endpoint;
    /**
     * The current @@PlatformHandlerMetadata@@ resolved by Ts.ED during the request.
     */
    handlerMetadata;
    #isFinished = false;
    constructor(options) {
        super(options);
        options.endpoint && (this.endpoint = options.endpoint);
        this.event = options.event;
        this.response = new (options.ResponseKlass || PlatformResponse)(this);
        this.request = new (options.RequestKlass || PlatformRequest)(this);
        this.request.request.$ctx = this;
        this.request.request.id = this.id;
        this.response.setHeader("x-request-id", this.id);
    }
    get url() {
        return this.request.url;
    }
    get app() {
        return this.injector.get(PlatformApplication);
    }
    start() {
        return this.emit("$onRequest", this);
    }
    async finish() {
        await Promise.all([this.emit("$onResponse", this), this.destroy()]);
        this.#isFinished = true;
    }
    isFinished() {
        return this.#isFinished;
    }
    isDone() {
        return this.request?.isAborted() || this.response?.isDone() || this.isFinished();
    }
    /**
     * Return the framework request instance (Express, Koa, etc...)
     */
    getRequest() {
        return this.request.getRequest();
    }
    /**
     * Return the framework response instance (Express, Koa, etc...)
     */
    getResponse() {
        return this.response.getResponse();
    }
    /**
     * Get Node.js request
     */
    getReq() {
        return this.request.getReq();
    }
    /**
     * Get Node.js response
     */
    getRes() {
        return this.response.getRes();
    }
    /**
     * Return the original application instance.
     */
    getApp() {
        return this.app.getApp();
    }
}
//# sourceMappingURL=PlatformContext.js.map