var PlatformMulterMiddleware_1;
import { __decorate, __metadata, __param } from "tslib";
import { Inject, Value } from "@tsed/di";
import { BadRequest } from "@tsed/exceptions";
import { Middleware } from "@tsed/platform-middlewares";
import { Context } from "@tsed/platform-params";
import { PlatformContext } from "../domain/PlatformContext.js";
import { PlatformApplication } from "../services/PlatformApplication.js";
export class MulterException extends BadRequest {
    constructor(er) {
        super(er.message);
        this.origin = er;
        this.name = er.code;
    }
}
/**
 * @middleware
 */
let PlatformMulterMiddleware = PlatformMulterMiddleware_1 = class PlatformMulterMiddleware {
    settings;
    app;
    async use(ctx) {
        try {
            const { fields, options = {} } = ctx.endpoint.get(PlatformMulterMiddleware_1);
            const settings = {
                ...this.settings,
                ...options
            };
            /* istanbul ignore next */
            if (settings.storage) {
                delete settings.dest;
            }
            const middleware = this.app.multer(settings).fields(this.getFields({ fields }));
            return await middleware(ctx.getRequest(), ctx.getResponse());
        }
        catch (er) {
            if (er.code) {
                throw new MulterException(er);
            }
            throw er;
        }
    }
    getFields(conf) {
        return conf.fields.map(({ name, maxCount }) => ({ name, maxCount }));
    }
};
__decorate([
    Value("multer", {}) // NOTE: don't use constant to getting multer configuration. See issue #1840
    ,
    __metadata("design:type", Object)
], PlatformMulterMiddleware.prototype, "settings", void 0);
__decorate([
    Inject(),
    __metadata("design:type", PlatformApplication)
], PlatformMulterMiddleware.prototype, "app", void 0);
__decorate([
    __param(0, Context()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [PlatformContext]),
    __metadata("design:returntype", Promise)
], PlatformMulterMiddleware.prototype, "use", null);
PlatformMulterMiddleware = PlatformMulterMiddleware_1 = __decorate([
    Middleware({
        priority: 10
    })
], PlatformMulterMiddleware);
export { PlatformMulterMiddleware };
//# sourceMappingURL=PlatformMulterMiddleware.js.map