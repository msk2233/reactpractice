import { __decorate, __metadata, __param } from "tslib";
import { uniq } from "@tsed/core";
import { Constant } from "@tsed/di";
import { NotAcceptable } from "@tsed/exceptions";
import { Middleware } from "@tsed/platform-middlewares";
import { Context } from "@tsed/platform-params";
/**
 * @middleware
 * @platform
 */
let PlatformAcceptMimesMiddleware = class PlatformAcceptMimesMiddleware {
    acceptMimes;
    use(ctx) {
        const { endpoint, request } = ctx;
        const mimes = uniq((endpoint?.get("acceptMimes") || []).concat(this.acceptMimes));
        if (mimes.length && !request.accepts(mimes)) {
            throw new NotAcceptable(mimes.join(", "));
        }
    }
};
__decorate([
    Constant("acceptMimes", []),
    __metadata("design:type", Array)
], PlatformAcceptMimesMiddleware.prototype, "acceptMimes", void 0);
__decorate([
    __param(0, Context()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], PlatformAcceptMimesMiddleware.prototype, "use", null);
PlatformAcceptMimesMiddleware = __decorate([
    Middleware({
        priority: -10
    })
], PlatformAcceptMimesMiddleware);
export { PlatformAcceptMimesMiddleware };
//# sourceMappingURL=PlatformAcceptMimesMiddleware.js.map