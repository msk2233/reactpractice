export declare const requires: Map<string, any>;
export declare function getCachedEngine(name: string, toName?: string): any;
export declare function importEngine(name: string, toName?: string): Promise<any>;
export declare function setEngine(name: string, toName?: string): Promise<void>;
export declare function setToCache(key: string, value: any): void;
export declare function getFromCache(key: string): string | undefined;
/**
 * Clear the cache.
 *
 * @api public
 */
export declare const clearCache: () => void;
/**
 * Conditionally cache `compiled` template based
 * on the `options` filename and `.cache` boolean.
 *
 * @param {Object} options
 * @param {Function} compiled
 * @return {Function}
 */
export declare function cache(options: any, compiled?: any): any;
/**
 * Read `path` with `options` with
 * callback `(err, str)`. When `options.cache`
 * is true the template string will be cached.
 *
 * @param path
 * @param {String} options
 */
export declare function read(path: string, options: any): Promise<string>;
/**
 * Read `path` with `options` with
 * callback `(err, str)`. When `options.cache`
 * is true the partial string will be cached.
 *
 * @param path
 * @param {String} options
 * @api private
 */
export declare function readPartials(path: string, options: any): Promise<Record<string, string> | void>;
