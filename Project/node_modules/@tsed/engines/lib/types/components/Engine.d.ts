export interface ViewEngineOptions {
    requires?: string | string[];
}
export interface EngineOptions {
    cache?: boolean;
    [otherOptions: string]: any;
}
export declare class Engine {
    readonly name: string;
    readonly options: ViewEngineOptions;
    protected driverName: string;
    constructor(name: string, options: ViewEngineOptions);
    get engine(): any;
    $onInit(): Promise<void>;
    compile(template: string, options: EngineOptions): any;
    compileFile(file: string, options: EngineOptions): any;
    render(template: string, options: EngineOptions): Promise<any>;
    renderFile(file: string, options: EngineOptions): Promise<any>;
    protected readPartials(file: string, options: EngineOptions): Promise<EngineOptions>;
    protected $cacheOptions(template: string, options: EngineOptions, fromFile?: boolean): EngineOptions;
    protected $compile(template: string, options: EngineOptions): (options: EngineOptions) => Promise<string>;
    protected $compileFile(file: string, options: EngineOptions): Promise<(options: EngineOptions) => Promise<string>>;
    protected importEngine(name: string, options: ViewEngineOptions): Promise<void>;
}
