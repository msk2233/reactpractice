"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NunjucksEngine = void 0;
const tslib_1 = require("tslib");
const util_1 = require("util");
const viewEngine_1 = require("../decorators/viewEngine");
const Engine_1 = require("./Engine");
let NunjucksEngine = class NunjucksEngine extends Engine_1.Engine {
    configure(options) {
        const engine = options.nunjucksEnv || this.engine;
        let env = engine;
        // deprecated fallback support for express
        // <https://github.com/tj/consolidate.js/pull/152>
        // <https://github.com/tj/consolidate.js/pull/224>
        if (options.settings && options.settings.views) {
            env = engine.configure(options.settings.views);
        }
        else if (options.nunjucks && options.nunjucks.configure) {
            // eslint-disable-next-line prefer-spread
            env = engine.configure.apply(engine, options.nunjucks.configure);
        }
        //
        // because `renderString` does not initiate loaders
        // we must manually create a loader for it based off
        // either `options.settings.views` or `options.nunjucks` or `options.nunjucks.root`
        //
        // <https://github.com/mozilla/nunjucks/issues/730>
        // <https://github.com/crocodilejs/node-email-templates/issues/182>
        //
        // so instead we simply check if we passed a custom loader
        // otherwise we create a simple file based loader
        if (options.loader) {
            return new engine.Environment(options.loader);
        }
        if (options.settings && options.settings.views) {
            return new engine.Environment(new engine.FileSystemLoader(options.settings.views));
        }
        if (options.nunjucks && options.nunjucks.loader) {
            if (typeof options.nunjucks.loader === "string") {
                return new engine.Environment(new engine.FileSystemLoader(options.nunjucks.loader));
            }
            return new engine.Environment(new engine.FileSystemLoader(options.nunjucks.loader[0], options.nunjucks.loader[1]));
        }
        return env;
    }
    $compile(template, options) {
        let engine = this.configure(options);
        const render = (0, util_1.promisify)(engine.renderString.bind(engine));
        return (options) => render(template, options);
    }
};
NunjucksEngine = tslib_1.__decorate([
    (0, viewEngine_1.ViewEngine)("nunjucks")
], NunjucksEngine);
exports.NunjucksEngine = NunjucksEngine;
//# sourceMappingURL=NunjucksEngine.js.map