"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.readPartials = exports.read = exports.cache = exports.clearCache = exports.getFromCache = exports.setToCache = exports.setEngine = exports.importEngine = exports.getCachedEngine = exports.requires = void 0;
const node_path_1 = require("node:path");
const promises_1 = require("node:fs/promises");
const readCache = new Map();
const cacheStore = new Map();
exports.requires = new Map();
function getCachedEngine(name, toName = name) {
    const mdl = exports.requires.get(toName) || {};
    return mdl.default || mdl;
}
exports.getCachedEngine = getCachedEngine;
async function importEngine(name, toName = name) {
    if (!exports.requires.has(toName)) {
        await setEngine(name, toName);
    }
    return getCachedEngine(toName);
}
exports.importEngine = importEngine;
async function setEngine(name, toName = name) {
    const mdl = await (_a = name, Promise.resolve().then(() => __importStar(require(_a))));
    exports.requires.set(toName, mdl);
}
exports.setEngine = setEngine;
function setToCache(key, value) {
    readCache.set(key, value);
}
exports.setToCache = setToCache;
function getFromCache(key) {
    return readCache.get(key);
}
exports.getFromCache = getFromCache;
/**
 * Clear the cache.
 *
 * @api public
 */
const clearCache = () => {
    readCache.clear();
    cacheStore.clear();
};
exports.clearCache = clearCache;
/**
 * Conditionally cache `compiled` template based
 * on the `options` filename and `.cache` boolean.
 *
 * @param {Object} options
 * @param {Function} compiled
 * @return {Function}
 */
function cache(options, compiled) {
    // cachable
    if (compiled && options.filename && options.cache) {
        readCache.delete(options.filename);
        cacheStore.set(options.filename, compiled);
        return compiled;
    }
    // check cache
    if (options.filename && options.cache) {
        return cacheStore.get(options.filename);
    }
    return compiled;
}
exports.cache = cache;
/**
 * Read `path` with `options` with
 * callback `(err, str)`. When `options.cache`
 * is true the template string will be cached.
 *
 * @param path
 * @param {String} options
 */
async function read(path, options) {
    let str = readCache.get(path);
    // cached (only if cached is a string and not a compiled template function)
    if (options.cache && str && typeof str === "string") {
        return str;
    }
    // read
    str = await (0, promises_1.readFile)(path, "utf8");
    // remove extraneous utf8 BOM marker
    str = str.replace(/^\uFEFF/, "");
    if (options.cache) {
        readCache.set(path, str);
    }
    return str;
}
exports.read = read;
/**
 * Read `path` with `options` with
 * callback `(err, str)`. When `options.cache`
 * is true the partial string will be cached.
 *
 * @param path
 * @param {String} options
 * @api private
 */
function readPartials(path, options) {
    if (!options.partials) {
        return Promise.resolve();
    }
    const keys = Object.keys(options.partials);
    const partials = {};
    return new Promise((resolve, reject) => {
        async function next(index) {
            if (index === keys.length) {
                return resolve(partials);
            }
            const key = keys[index];
            const partialPath = options.partials[key];
            if (partialPath === undefined || partialPath === null || partialPath === false) {
                return next(++index);
            }
            let file;
            if ((0, node_path_1.isAbsolute)(partialPath)) {
                if ((0, node_path_1.extname)(partialPath) !== "") {
                    file = partialPath;
                }
                else {
                    file = (0, node_path_1.join)(partialPath + (0, node_path_1.extname)(path));
                }
            }
            else {
                file = (0, node_path_1.join)((0, node_path_1.dirname)(path), partialPath + (0, node_path_1.extname)(path));
            }
            try {
                partials[key] = await read(file, options);
                next(++index);
            }
            catch (err) {
                reject(err);
            }
        }
        next(0);
    });
}
exports.readPartials = readPartials;
//# sourceMappingURL=cache.js.map