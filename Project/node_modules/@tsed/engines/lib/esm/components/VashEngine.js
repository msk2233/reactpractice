import { __decorate } from "tslib";
import { promisify } from "util";
import { ViewEngine } from "../decorators/viewEngine.js";
import { Engine } from "./Engine.js";
let VashEngine = class VashEngine extends Engine {
    compile(template, options) {
        if (options.helpers) {
            for (const key in options.helpers) {
                if (!options.helpers.hasOwnProperty(key) || typeof options.helpers[key] !== "function") {
                    continue;
                }
                this.engine.helpers[key] = options.helpers[key];
            }
        }
        const compile = promisify(this.engine.compile(template, options));
        return async (options) => {
            const ctx = await compile(options);
            ctx.finishLayout();
            return ctx.toString();
        };
    }
    async render(template, options) {
        const compile = this.compile(template, options);
        const tpl = await compile(options);
        return tpl.replace(/\n$/, "");
    }
};
VashEngine = __decorate([
    ViewEngine("vash")
], VashEngine);
export { VashEngine };
//# sourceMappingURL=VashEngine.js.map