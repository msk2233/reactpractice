import { __decorate } from "tslib";
import { ViewEngine } from "../decorators/viewEngine.js";
import { Engine } from "./Engine.js";
import { existsSync } from "fs";
let TwingEngine = class TwingEngine extends Engine {
    instance;
    $compile(template, options) {
        const engine = this.engine;
        if (!this.instance) {
            let loader = new engine.TwingLoaderNull();
            if (options.settings && options.settings.views && existsSync(options.settings.views)) {
                loader = new engine.TwingLoaderFilesystem(options.settings.views);
            }
            this.instance = new engine.TwingEnvironment(loader);
        }
        const $cmp = this.instance.createTemplate(template);
        return async (options) => {
            const compile = await $cmp;
            return compile.render(options);
        };
    }
};
TwingEngine = __decorate([
    ViewEngine("twing")
], TwingEngine);
export { TwingEngine };
//# sourceMappingURL=TwingEngine.js.map