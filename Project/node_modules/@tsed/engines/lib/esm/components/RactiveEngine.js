import { __decorate } from "tslib";
import { ViewEngine } from "../decorators/viewEngine.js";
import { Engine } from "./Engine.js";
let RactiveEngine = class RactiveEngine extends Engine {
    $compile(template, options) {
        const Engine = this.engine;
        const compile = this.engine.parse(template);
        Engine.DEBUG = false;
        return (options) => {
            options.template = compile;
            return new Engine(this.clean(options)).toHTML();
        };
    }
    clean(options) {
        if (options.data === null || options.data === undefined) {
            // Shallow clone the options object
            options.data = Object.assign({}, options);
            // Remove consolidate-specific properties from the clone
            let i;
            let length;
            let properties = ["template", "filename", "cache", "partials"];
            for (i = 0, length = properties.length; i < length; i++) {
                const property = properties[i];
                delete options.data[property];
            }
        }
        return options;
    }
};
RactiveEngine = __decorate([
    ViewEngine("ractive")
], RactiveEngine);
export { RactiveEngine };
//# sourceMappingURL=RactiveEngine.js.map