/**
 * @ignore
 */
export declare enum AnyToPromiseStatus {
    PENDING = "PENDING",
    CANCELED = "CANCELED",
    RESOLVED = "RESOLVED",
    REJECTED = "REJECTED"
}
export declare enum AnyToPromiseResponseTypes {
    STREAM = "STREAM",
    BUFFER = "BUFFER",
    DATA = "DATA"
}
export interface AnyPromiseResult<T = any> {
    state: AnyToPromiseStatus;
    type: AnyToPromiseResponseTypes;
    status?: number;
    headers?: Record<string, any>;
    data: T;
}
export declare class AnyToPromise<T = any> {
    #private;
    status: AnyToPromiseStatus;
    args: any[];
    constructor({ hasNextFunction }?: {
        hasNextFunction?: boolean;
    });
    isDone(): boolean;
    get next(): (error?: any) => void;
    /**
     *
     */
    call(cb: Function): Promise<AnyPromiseResult<T>>;
    reject(er: any): void;
    resolve(response?: any): void;
    destroy(): void;
    cancel(): any;
    done(status: AnyToPromiseStatus): void;
    handle(process: any, additionalProps?: {}): any;
    protected isCanceledResponse(process: any): boolean;
}
