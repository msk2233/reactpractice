import type { Type } from "./Type";
/**
 * @ignore
 */
export declare const CLASS_STORE = "tsed:class:store";
/**
 * @ignore
 */
export declare const METHOD_STORE = "tsed:method:store";
/**
 * @ignore
 */
export declare const PROPERTY_STORE = "tsed:property:store";
/**
 * @ignore
 */
export declare const PARAM_STORE = "tsed:param:store";
export declare class Store {
    private _entries;
    /**
     * Create or get a Store from args {target + methodName + descriptor}
     * @param args
     * @returns {Store}
     */
    static from(...args: any[]): Store;
    /**
     * Create store on the method.
     * @param target
     * @param {string} propertyKey
     * @returns {Store}
     */
    static fromMethod(target: any, propertyKey: string | symbol): Store;
    static mergeStoreFrom(target: Type<any>, source: Type<any>, ...args: any[]): Store;
    static mergeStoreMethodFrom(target: Type<any>, source: Type<any>, propertyKey: string | symbol): Store;
    /**
     * The get() method returns a specified element from a Map object.
     * @param key Required. The key of the element to return from the Map object.
     * @param defaultValue
     * @returns {T} Returns the element associated with the specified key or undefined if the key can't be found in the Map object.
     */
    get<T = any>(key: any, defaultValue?: any): T;
    /**
     * The has() method returns a boolean indicating whether an element with the specified key exists or not.
     * @param key
     * @returns {boolean}
     */
    has(key: any): boolean;
    /**
     * The set() method adds or updates an element with a specified key and value to a Map object.
     * @param key Required. The key of the element to add to the Map object.
     * @param metadata Required. The value of the element to add to the Map object.
     */
    set(key: any, metadata: any): Store;
    /**
     * The delete() method removes the specified element from a Map object.
     * @param key Required. The key of the element to remove from the Map object.
     * @returns {boolean} Returns true if an element in the Map object existed and has been removed, or false if the element does not exist.
     */
    delete(key: string): boolean;
    /**
     * Merge given value with existing value.
     * @param key
     * @param value
     * @param inverse Change the merge order. Get the existing value and apply over given value
     * @returns {Store}
     */
    merge(key: any, value: any, inverse?: boolean): Store;
    toJson(): {};
}
