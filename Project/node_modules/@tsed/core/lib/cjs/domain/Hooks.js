"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hooks = void 0;
class Hooks {
    #listeners = {};
    has(event) {
        return !!this.#listeners[event];
    }
    /**
     * Listen a hook event
     * @param event
     * @param cb
     */
    on(event, cb) {
        if (!this.#listeners[event]) {
            this.#listeners[event] = [];
        }
        this.#listeners[event].push(cb);
        return this;
    }
    /**
     * Remove a listener attached to an event
     * @param event
     * @param cb
     */
    off(event, cb) {
        if (this.#listeners[event]) {
            this.#listeners[event] = this.#listeners[event].filter((item) => item === cb);
        }
        return this;
    }
    /**
     * Trigger an event and call listener.
     * @param event
     * @param args
     * @param callThis
     */
    emit(event, args = [], callThis = null) {
        const listeners = this.#listeners[event];
        if (listeners?.length) {
            for (const cb of listeners) {
                cb.call(callThis, ...args);
            }
        }
    }
    /**
     * Trigger an event, listener alter given value and return it.
     * @param event
     * @param value
     * @param args
     * @param callThis
     */
    alter(event, value, args = [], callThis = null) {
        const listeners = this.#listeners[event];
        if (listeners?.length) {
            for (const cb of listeners) {
                value = cb.call(callThis, value, ...args);
            }
        }
        return value;
    }
    /**
     * Trigger an event and call async listener.
     * @param event
     * @param args
     * @param callThis
     */
    async asyncEmit(event, args = [], callThis = null) {
        const listeners = this.#listeners[event];
        if (listeners?.length) {
            const promises = listeners.map((cb) => cb.call(callThis, ...args));
            await Promise.all(promises);
        }
    }
    /**
     * Trigger an event, async listener alter given value and return it.
     * @param event
     * @param value
     * @param args
     * @param callThis
     */
    async asyncAlter(event, value, args = [], callThis = null) {
        const listeners = this.#listeners[event];
        if (listeners?.length) {
            for (const cb of listeners) {
                value = await cb.call(callThis, value, ...args);
            }
        }
        return value;
    }
    destroy() {
        this.#listeners = {};
    }
}
exports.Hooks = Hooks;
//# sourceMappingURL=Hooks.js.map