"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformHandlerMetadata = void 0;
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
const platform_params_1 = require("@tsed/platform-params");
const schema_1 = require("@tsed/schema");
const PlatformHandlerType_1 = require("./PlatformHandlerType");
class PlatformHandlerMetadata {
    path;
    provider;
    propertyKey;
    type = PlatformHandlerType_1.PlatformHandlerType.RAW_FN;
    hasNextFunction = false;
    opts = {};
    compiledHandler;
    #handler;
    constructor(props) {
        const { propertyKey, type, provider, handler, opts } = props;
        this.provider = provider;
        this.type = type || handler.type || PlatformHandlerType_1.PlatformHandlerType.RAW_FN;
        this.opts = opts || {};
        this.#handler = propertyKey ? this.target.prototype[propertyKey] : handler;
        if (propertyKey) {
            this.propertyKey = propertyKey;
            this.hasNextFunction = this.hasParamType(platform_params_1.ParamTypes.NEXT_FN);
            if (this.hasParamType(platform_params_1.ParamTypes.ERR)) {
                this.type = PlatformHandlerType_1.PlatformHandlerType.ERR_MIDDLEWARE;
            }
        }
        else {
            if (this.#handler.length === 4) {
                this.type = PlatformHandlerType_1.PlatformHandlerType.RAW_ERR_FN;
            }
            this.hasNextFunction = this.#handler.length >= 3;
        }
    }
    get target() {
        return this.provider?.useClass || this.#handler;
    }
    get token() {
        return this.provider?.token || this.#handler;
    }
    get handler() {
        return this.#handler;
    }
    get scope() {
        return this.provider?.scope || di_1.ProviderScope.SINGLETON;
    }
    get hasErrorParam() {
        return this.type === PlatformHandlerType_1.PlatformHandlerType.ERR_MIDDLEWARE || this.type === PlatformHandlerType_1.PlatformHandlerType.RAW_ERR_FN;
    }
    get store() {
        return schema_1.JsonEntityStore.fromMethod(this.provider.useClass, this.propertyKey);
    }
    static from(injector, input, opts = {}) {
        if (input instanceof PlatformHandlerMetadata) {
            return input;
        }
        if (input instanceof schema_1.EndpointMetadata) {
            const provider = injector.getProvider(opts.token);
            return new PlatformHandlerMetadata({
                provider,
                type: PlatformHandlerType_1.PlatformHandlerType.ENDPOINT,
                propertyKey: input.propertyKey,
                opts
            });
        }
        const provider = injector.getProvider(input);
        if (provider) {
            return new PlatformHandlerMetadata({
                provider,
                type: PlatformHandlerType_1.PlatformHandlerType.MIDDLEWARE,
                propertyKey: "use",
                opts
            });
        }
        return new PlatformHandlerMetadata({
            handler: input,
            type: input.type,
            opts
        });
    }
    getParams() {
        return schema_1.JsonParameterStore.getParams(this.target, this.propertyKey) || [];
    }
    hasParamType(paramType) {
        return this.getParams().findIndex((p) => p.paramType === paramType) > -1;
    }
    isInjectable() {
        return !(this.isRawFn() || this.isResponseFn());
    }
    isRawFn() {
        return this.type === PlatformHandlerType_1.PlatformHandlerType.RAW_ERR_FN || this.type === PlatformHandlerType_1.PlatformHandlerType.RAW_FN;
    }
    isEndpoint() {
        return this.type === PlatformHandlerType_1.PlatformHandlerType.ENDPOINT;
    }
    isCtxFn() {
        return this.type === PlatformHandlerType_1.PlatformHandlerType.CTX_FN;
    }
    isResponseFn() {
        return this.type === PlatformHandlerType_1.PlatformHandlerType.RESPONSE_FN;
    }
    toString() {
        return [(0, core_1.nameOf)(this.target), this.propertyKey].filter(Boolean).join(".");
    }
}
exports.PlatformHandlerMetadata = PlatformHandlerMetadata;
//# sourceMappingURL=PlatformHandlerMetadata.js.map