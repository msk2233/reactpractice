import { DIContext, InjectorService, Provider, ProviderScope, TokenProvider } from "@tsed/di";
import { JsonParameterStore } from "@tsed/schema";
import { PlatformHandlerType } from "./PlatformHandlerType";
import { SinglePathType } from "./SinglePathType";
export interface PlatformHandlerMetadataOpts extends Record<string, any> {
    token?: TokenProvider;
}
export interface PlatformHandlerMetadataProps {
    provider?: Provider;
    handler?: any;
    opts?: PlatformHandlerMetadataOpts;
    propertyKey?: string | symbol;
    type?: PlatformHandlerType;
}
export declare class PlatformHandlerMetadata {
    #private;
    path: SinglePathType;
    readonly provider?: Provider;
    readonly propertyKey: string | symbol;
    readonly type: PlatformHandlerType;
    readonly hasNextFunction: boolean;
    readonly opts: PlatformHandlerMetadataOpts;
    compiledHandler: ($ctx: DIContext) => any;
    constructor(props: PlatformHandlerMetadataProps);
    get target(): any;
    get token(): any;
    get handler(): any;
    get scope(): ProviderScope;
    get hasErrorParam(): boolean;
    get store(): import("@tsed/schema").JsonMethodStore;
    static from(injector: InjectorService, input: any, opts?: PlatformHandlerMetadataOpts): PlatformHandlerMetadata;
    getParams(): JsonParameterStore[];
    hasParamType(paramType: any): boolean;
    isInjectable(): boolean;
    isRawFn(): boolean;
    isEndpoint(): boolean;
    isCtxFn(): boolean;
    isResponseFn(): boolean;
    toString(): string;
}
