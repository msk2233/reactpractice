import { Type } from "@tsed/core";
import { Provider } from "@tsed/di";
import type { PlatformParamsCallback } from "@tsed/platform-params";
import { PlatformHandlerMetadata } from "./PlatformHandlerMetadata";
import type { PlatformRouter } from "./PlatformRouter";
import { SinglePathType } from "./SinglePathType";
export interface PlatformLayerOptions extends Record<string, any> {
    token?: Type<any>;
}
export interface PlatformLayerProps {
    parent: PlatformLayer;
    provider: Provider;
    path: SinglePathType;
    basePath: SinglePathType;
    method: string;
    handlers: any[];
    router: PlatformRouter;
    opts: PlatformLayerOptions;
}
export declare class PlatformLayer {
    #private;
    provider: Provider;
    path: SinglePathType;
    method: string;
    handlers: PlatformHandlerMetadata[];
    router?: PlatformRouter;
    opts: PlatformLayerOptions;
    layers: PlatformLayer[];
    parent?: PlatformLayer;
    basePath: SinglePathType;
    constructor(props?: Partial<PlatformLayerProps>);
    set(args: PlatformParamsCallback[]): void;
    getArgs(): (SinglePathType | PlatformParamsCallback<import("@tsed/di").DIContext>)[];
    isProvider(): boolean;
    inspect(): {
        basePath: string;
        path: SinglePathType;
        method: string;
        handlers: string[];
        opts: {};
    };
    getBasePath(): string;
    setLayers(layers: PlatformLayer[]): void;
}
