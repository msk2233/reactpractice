import { Hooks, Type } from "@tsed/core";
import { InjectorService, TokenProvider } from "@tsed/di";
import { JsonMethodStore } from "@tsed/schema";
import { PlatformLayer } from "./PlatformLayer";
import { PlatformRouter } from "./PlatformRouter";
export interface AlterEndpointHandlersArg {
    before: (Type<any> | Function)[];
    endpoint: JsonMethodStore;
    after: (Type<any> | Function)[];
}
export declare class PlatformRouters {
    protected readonly injector: InjectorService;
    readonly hooks: Hooks;
    readonly allowedVerbs: import("@tsed/schema").OperationVerbs[];
    constructor(injector: InjectorService);
    prebuild(): void;
    from(token: TokenProvider, parentMiddlewares?: any[]): PlatformRouter;
    getLayers(router: PlatformRouter): PlatformLayer[];
    private sortHandlers;
    private flatMapLayers;
}
