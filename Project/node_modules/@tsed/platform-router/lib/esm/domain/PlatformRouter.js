var PlatformRouter_1;
import { __decorate, __metadata } from "tslib";
import { isString } from "@tsed/core";
import { Injectable, InjectorService, ProviderScope, Scope } from "@tsed/di";
import { concatPath } from "@tsed/schema";
import { formatMethod } from "../utils/formatMethod.js";
import { PlatformHandlerMetadata } from "./PlatformHandlerMetadata.js";
import { PlatformLayer } from "./PlatformLayer.js";
function printHandler(handler) {
    return handler.toString().split("{")[0].trim();
}
let PlatformRouter = PlatformRouter_1 = class PlatformRouter {
    injector;
    layers = [];
    provider;
    #isBuilt = false;
    constructor(injector) {
        this.injector = injector;
    }
    use(...handlers) {
        const layer = handlers.reduce((layer, item) => {
            if (isString(item) || item instanceof RegExp) {
                layer.path = item;
                layer.basePath = item;
            }
            else {
                if (item instanceof PlatformRouter_1) {
                    layer.router = item;
                    layer.setLayers(item.layers);
                    if (!this.provider && item.provider) {
                        layer.path = concatPath(layer.path, item.provider.path);
                    }
                    else {
                        layer.path = layer.path || item.provider.path;
                    }
                }
                else {
                    item = PlatformHandlerMetadata.from(this.injector, item);
                }
                layer.handlers.push(item);
            }
            return layer;
        }, new PlatformLayer({
            method: "use",
            basePath: this.provider?.path || "/",
            provider: this.provider
        }));
        this.layers.push(layer);
        return this;
    }
    addRoute(method, path, handlers, opts = {}) {
        const layer = new PlatformLayer({
            provider: this.provider,
            method: formatMethod(method),
            path,
            handlers: handlers.map((input) => {
                return PlatformHandlerMetadata.from(this.injector, input, opts);
            }),
            opts
        });
        this.layers.push(layer);
        return this;
    }
    all(path, ...handlers) {
        return this.addRoute("all", path, handlers);
    }
    get(path, ...handlers) {
        return this.addRoute("get", path, handlers);
    }
    post(path, ...handlers) {
        return this.addRoute("post", path, handlers);
    }
    put(path, ...handlers) {
        return this.addRoute("put", path, handlers);
    }
    delete(path, ...handlers) {
        return this.addRoute("delete", path, handlers);
    }
    patch(path, ...handlers) {
        return this.addRoute("patch", path, handlers);
    }
    head(path, ...handlers) {
        return this.addRoute("head", path, handlers);
    }
    options(path, ...handlers) {
        return this.addRoute("options", path, handlers);
    }
    statics(path, options) {
        return this.addRoute("statics", path, [], options);
    }
    inspect() {
        return this.layers.map((layer) => {
            const obj = layer.inspect();
            return {
                ...obj,
                handlers: obj.handlers.map(printHandler),
                path: concatPath(this.provider?.path, obj.path)
            };
        });
    }
    isBuilt() {
        if (this.#isBuilt) {
            return true;
        }
        this.#isBuilt = true;
        return false;
    }
};
PlatformRouter = PlatformRouter_1 = __decorate([
    Injectable(),
    Scope(ProviderScope.INSTANCE),
    __metadata("design:paramtypes", [InjectorService])
], PlatformRouter);
export { PlatformRouter };
//# sourceMappingURL=PlatformRouter.js.map