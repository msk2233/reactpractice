import type { ProviderOpts } from "../interfaces/ProviderOpts";
import type { ProviderType } from "./ProviderType";
import type { TokenProvider } from "../interfaces/TokenProvider";
import { Provider } from "./Provider";
export declare class Container extends Map<TokenProvider, Provider> {
    /**
     *
     * @param token
     * @param settings
     */
    add(token: TokenProvider, settings?: Partial<ProviderOpts>): this;
    /**
     * Add a provider to the
     * @param token
     * @param settings
     */
    addProvider(token: TokenProvider, settings?: Partial<ProviderOpts>): this;
    /**
     *
     * @param token
     */
    hasProvider(token: TokenProvider): boolean;
    /**
     * Add a provider to the
     * @param token
     * @param provider
     */
    setProvider(token: TokenProvider, provider: Provider): this;
    /**
     * The getProvider() method returns a specified element from a Map object.
     * @returns {T} Returns the element associated with the specified key or undefined if the key can't be found in the Map object.
     * @param token
     */
    getProvider<T extends Provider = Provider>(token: TokenProvider): T | undefined;
    /**
     * Get all providers registered in the injector container.
     *
     * @param {ProviderType} type Filter the list by the given ProviderType.
     * @returns {[TokenProvider , Provider<any>][]}
     */
    getProviders(type?: ProviderType | string | string[]): Provider[];
    addProviders(container: Map<TokenProvider, Provider>): void;
}
