/**
 * Lazy load a provider from his package and invoke only when the provider is used
 *
 * ```typescript
 * import type {PlatformException} from "@tsed/platform-exceptions";
 *
 * @Injectable()
 * export class MyService {
 *   @LazyInject("PlatformException", () => import("@tsed/platform-exceptions"))
 *   exceptions: Promise<PlatformException>;
 * }
 * ```
 *
 * @param key
 * @param packageName
 * @param resolver
 * @param optional
 * @returns {Function}
 * @decorator
 */
export declare function LazyInject(key: string, resolver: () => any, { optional, packageName }?: {
    optional?: boolean;
    packageName?: string;
}): PropertyDecorator;
/**
 * Optionally Lazy load a provider from his package and invoke only when the provider is used
 *
 * ```typescript
 * import type {PlatformException} from "@tsed/platform-exceptions";
 *
 * @Injectable()
 * export class MyService {
 *   @OptionalLazyInject("@tsed/platform-exceptions")
 *   exceptions: Promise<PlatformException>;
 * }
 * ```
 *
 * @param key
 * @param resolver
 * @returns {Function}
 * @decorator
 */
export declare function OptionalLazyInject(key: string, resolver: () => any): PropertyDecorator;
