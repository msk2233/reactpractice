import { DILogger } from "../../common/index";
import { Hooks } from "@tsed/core";
import { LogLevel } from "@tsed/logger";
export interface ContextLoggerOptions extends Record<string, any> {
    id: string;
    logger?: DILogger;
    level?: "debug" | "info" | "warn" | "error" | "off" | "all";
    maxStackSize?: number;
    additionalProps?: Record<any, any>;
}
export declare class ContextLogger {
    #private;
    readonly dateStart: Date;
    readonly id: string;
    maxStackSize: number;
    level: LogLevel;
    constructor({ id, logger, dateStart, level, maxStackSize, additionalProps }: ContextLoggerOptions);
    get hooks(): Hooks;
    private get stack();
    alterLog(cb: (data: any, level: "debug" | "info" | "warn" | "error" | "off" | "all", withRequest: boolean) => any): Hooks;
    alterIgnoreLog(cb: (ignore: boolean, data: any) => boolean): Hooks;
    info(obj: any): this;
    debug(obj: any, withRequest?: boolean): this;
    warn(obj: any): this;
    error(obj: any): this;
    fatal(obj: any): this;
    trace(obj: any): this;
    flush(stream?: boolean): void;
    isLevelEnabled(otherLevel: string | LogLevel): boolean;
    /**
     * Return the duration between the time when LogIncomingRequest has handle the request and now.
     * @returns {number}
     */
    protected getDuration(): number;
    protected getData(obj: any): any;
    protected run(level: LogLevel, obj: any, withRequest?: boolean): void;
}
