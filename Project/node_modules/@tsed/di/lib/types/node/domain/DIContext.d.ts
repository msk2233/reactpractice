import { InjectorService, LocalsContainer } from "../../common/index";
import { ContextLogger, ContextLoggerOptions } from "./ContextLogger";
export interface DIContextOptions extends Omit<ContextLoggerOptions, "dateStart"> {
    id: string;
    injector: InjectorService;
    logger: any;
}
export declare class DIContext {
    #private;
    opts: DIContextOptions;
    [x: string]: any;
    constructor(opts: DIContextOptions);
    /**
     * Logger attached to the context request.
     */
    get logger(): ContextLogger;
    /**
     * Request id generated by @@contextMiddleware@@.
     *
     * ::: tip
     * By default Ts.ED generate uuid like that `uuidv4().replace(/-/gi, ""))`.
     * Dash are removed to simplify tracking logs in Kibana
     * :::
     *
     * ::: tip
     * Request id can by customized by changing the server configuration.
     *
     * ```typescript
     * @Configuration({
     *   logger: {
     *     reqIdBuilder: createUniqId // give your own id generator function
     *   }
     * })
     * class Server {
     *
     * }
     * ```
     * :::
     *
     */
    get id(): string;
    get dateStart(): Date;
    get injector(): InjectorService;
    get env(): any;
    /**
     * The request container used by the Ts.ED DI. It contains all services annotated with `@Scope(ProviderScope.REQUEST)`
     */
    get container(): LocalsContainer;
    destroy(): Promise<any>;
    emit(eventName: string, ...args: any[]): Promise<void>;
    runInContext(next: Function): Promise<any>;
    cache<Value = any>(key: string, cb: () => Value): Value;
    cacheAsync<Value = any>(key: string, cb: () => Promise<Value>): Promise<Value>;
    delete(key: any): boolean;
    get<T = any>(key: any): T;
    has(key: any): boolean;
    set(key: any, value: any): this;
}
export type BaseContext = DIContext & TsED.Context;
