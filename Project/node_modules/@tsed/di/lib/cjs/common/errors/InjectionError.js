"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InjectionError = void 0;
const core_1 = require("@tsed/core");
const colors_1 = require("../utils/colors");
class InjectionError extends Error {
    name = "INJECTION_ERROR";
    tokens = [];
    origin;
    constructor(token, origin) {
        super((0, core_1.isString)(origin) ? origin : "");
        this.tokens = [token];
        if (origin) {
            if ((0, core_1.isString)(origin)) {
                this.origin = {
                    message: origin,
                    stack: this.stack
                };
            }
            else {
                if (origin.tokens) {
                    this.tokens = this.tokens.concat(origin.tokens);
                    this.origin = origin.origin;
                }
                else {
                    this.origin = origin;
                    this.stack = origin.stack;
                }
            }
        }
        const originMessage = this.origin ? "\nOrigin: " + this.origin.message : "";
        const tokensMessage = this.tokens.map((token) => (0, core_1.nameOf)(token)).join(" > ");
        this.message = `Injection failed on ${tokensMessage}${originMessage}`;
    }
    static throwInjectorError(token, currentDependency, error) {
        if (currentDependency && (0, core_1.isClass)(token)) {
            error.message = printDependencyInjectionError(token, { ...currentDependency, message: error.message });
        }
        throw new InjectionError(token, error);
    }
}
exports.InjectionError = InjectionError;
function printDependencyInjectionError(token, options) {
    let erroredArg = "";
    const args = (0, core_1.getConstructorArgNames)(token)
        .map((arg, index) => {
        if (options.index === index) {
            erroredArg = arg;
            arg = colors_1.colors.red(arg);
        }
        return `${arg}: ${(0, core_1.nameOf)(options.deps[index])}`;
    })
        .join(", ");
    const signature = (0, core_1.nameOf)(token) + "->constructor(" + args + ")";
    const indexOf = signature.indexOf(erroredArg) - 5;
    const drawline = (indexOf) => " ".repeat(indexOf) + colors_1.colors.red("^" + "â€¾".repeat(erroredArg.length - 1));
    return "Unable to inject dependency. " + options.message + "\n\n" + signature + "\n" + (indexOf > -1 ? drawline(indexOf) : "");
}
//# sourceMappingURL=InjectionError.js.map