"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerController = exports.registerValue = exports.registerProvider = void 0;
const Provider_1 = require("../domain/Provider");
const ProviderScope_1 = require("../domain/ProviderScope");
const ProviderType_1 = require("../domain/ProviderType");
const GlobalProviders_1 = require("./GlobalProviders");
/**
 *
 */
GlobalProviders_1.GlobalProviders.createRegistry(ProviderType_1.ProviderType.CONTROLLER, Provider_1.Provider);
/**
 * Register a provider configuration.
 * @param {ProviderOpts<any>} provider
 */
function registerProvider(provider) {
    if (!provider.provide) {
        throw new Error("Provider.provide is required");
    }
    return GlobalProviders_1.GlobalProviders.merge(provider.provide, provider);
}
exports.registerProvider = registerProvider;
/**
 * Add a new value in the `ProviderRegistry`.
 *
 * #### Example with symbol definition
 *
 *
 * ```typescript
 * import {registerValue, InjectorService} from "@tsed/di";
 *
 * const MyValue = Symbol.from("MyValue")
 *
 * registerValue({token: MyValue, useValue: "myValue"});
 *
 * @Service()
 * export class OtherService {
 *      constructor(@Inject(MyValue) myValue: string){
 *          console.log(myValue); /// "myValue"
 *      }
 * }
 * ```
 */
const registerValue = (provider, value) => {
    if (!provider.provide) {
        provider = {
            provide: provider
        };
    }
    provider = Object.assign({
        scope: ProviderScope_1.ProviderScope.SINGLETON,
        useValue: value
    }, provider, { type: ProviderType_1.ProviderType.VALUE });
    GlobalProviders_1.GlobalProviders.merge(provider.provide, provider);
};
exports.registerValue = registerValue;
/**
 * Add a new controller in the `ProviderRegistry`. This controller will be built when `InjectorService` will be loaded.
 *
 * #### Example
 *
 * ```typescript
 * import {registerController, InjectorService} from "@tsed/di";
 *
 * export default class MyController {
 *     constructor(){}
 *     transform() {
 *         return "test";
 *     }
 * }
 *
 * registerController({provide: MyController});
 * // or
 * registerController(MyController);
 *
 * const injector = new InjectorService();
 * injector.load();
 *
 * const myController = injector.get<MyController>(MyController);
 * myController.getFoo(); // test
 * ```
 *
 * @param provider Provider configuration.
 */
exports.registerController = GlobalProviders_1.GlobalProviders.createRegisterFn(ProviderType_1.ProviderType.CONTROLLER);
//# sourceMappingURL=ProviderRegistry.js.map