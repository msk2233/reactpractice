"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionalLazyInject = exports.LazyInject = void 0;
const core_1 = require("@tsed/core");
const inject_1 = require("./inject");
/**
 * Lazy load a provider from his package and invoke only when the provider is used
 *
 * ```typescript
 * import type {PlatformException} from "@tsed/platform-exceptions";
 *
 * @Injectable()
 * export class MyService {
 *   @LazyInject("PlatformException", () => import("@tsed/platform-exceptions"))
 *   exceptions: Promise<PlatformException>;
 * }
 * ```
 *
 * @param key
 * @param packageName
 * @param resolver
 * @param optional
 * @returns {Function}
 * @decorator
 */
function LazyInject(key, resolver, { optional = false, packageName = resolver.toString() } = {}) {
    return (target, propertyKey) => {
        let bean, token;
        (0, inject_1.injectProperty)(target, propertyKey, {
            resolver(injector) {
                return async () => {
                    if (!token) {
                        const exports = await (0, core_1.importPackage)(packageName, resolver, optional);
                        token = exports[key];
                        if (!token) {
                            if (!optional) {
                                throw new Error(`Unable to lazy load the "${key}". The token isn\'t a valid token provider.`);
                            }
                        }
                        bean = token ? await injector.lazyInvoke(token) : {};
                    }
                    return bean;
                };
            }
        });
    };
}
exports.LazyInject = LazyInject;
/**
 * Optionally Lazy load a provider from his package and invoke only when the provider is used
 *
 * ```typescript
 * import type {PlatformException} from "@tsed/platform-exceptions";
 *
 * @Injectable()
 * export class MyService {
 *   @OptionalLazyInject("@tsed/platform-exceptions")
 *   exceptions: Promise<PlatformException>;
 * }
 * ```
 *
 * @param key
 * @param resolver
 * @returns {Function}
 * @decorator
 */
function OptionalLazyInject(key, resolver) {
    return LazyInject(key, resolver, { optional: true });
}
exports.OptionalLazyInject = OptionalLazyInject;
//# sourceMappingURL=lazyInject.js.map