"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveControllers = exports.getTokens = void 0;
const core_1 = require("@tsed/core");
const GlobalProviders_1 = require("../registries/GlobalProviders");
const ProviderType_1 = require("../domain/ProviderType");
const lookupProperties = ["mount", "imports"];
function getTokens(config) {
    if (!config) {
        return [];
    }
    if ((0, core_1.isArray)(config)) {
        return config.filter(core_1.isClass).map((value) => {
            return { token: value };
        });
    }
    return Object.keys(config).reduce((list, route) => {
        return [
            ...list,
            ...[]
                .concat(config[route])
                .filter(core_1.isClass)
                .map((token) => ({
                route,
                token
            }))
        ];
    }, []);
}
exports.getTokens = getTokens;
function resolveRecursively(providers) {
    return providers
        .map(({ token }) => GlobalProviders_1.GlobalProviders.get(token))
        .filter((provider) => provider?.type === ProviderType_1.ProviderType.MODULE && provider.configuration)
        .flatMap((provider) => resolveControllers(provider.configuration));
}
/**
 * Return controllers and is base route according to his configuration in module configuration.
 *
 * @param settings
 */
function resolveControllers(settings) {
    const providers = lookupProperties.flatMap((property) => getTokens(settings[property]));
    return [...resolveRecursively(providers), ...providers].filter((provider) => !!provider.route);
}
exports.resolveControllers = resolveControllers;
//# sourceMappingURL=resolveControllers.js.map