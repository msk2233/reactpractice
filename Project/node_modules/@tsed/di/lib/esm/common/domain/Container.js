import { GlobalProviders } from "../registries/GlobalProviders.js";
import { Provider } from "./Provider.js";
export class Container extends Map {
    /**
     *
     * @param token
     * @param settings
     */
    add(token, settings = {}) {
        const provider = GlobalProviders.get(token)?.clone() || new Provider(token);
        Object.assign(provider, settings);
        return super.set(token, provider);
    }
    /**
     * Add a provider to the
     * @param token
     * @param settings
     */
    addProvider(token, settings = {}) {
        return this.add(token, settings);
    }
    /**
     *
     * @param token
     */
    hasProvider(token) {
        return super.has(token);
    }
    /**
     * Add a provider to the
     * @param token
     * @param provider
     */
    setProvider(token, provider) {
        return super.set(token, provider);
    }
    /**
     * The getProvider() method returns a specified element from a Map object.
     * @returns {T} Returns the element associated with the specified key or undefined if the key can't be found in the Map object.
     * @param token
     */
    getProvider(token) {
        return super.get(token);
    }
    /**
     * Get all providers registered in the injector container.
     *
     * @param {ProviderType} type Filter the list by the given ProviderType.
     * @returns {[TokenProvider , Provider<any>][]}
     */
    getProviders(type) {
        const types = [].concat(type);
        return [...this].reduce((providers, [_, provider]) => {
            if (types.includes(provider.type) || !type) {
                return [...providers, provider];
            }
            return providers;
        }, []);
    }
    addProviders(container) {
        container.forEach((provider) => {
            if (!this.hasProvider(provider.provide)) {
                this.setProvider(provider.provide, provider.clone());
            }
        });
    }
}
//# sourceMappingURL=Container.js.map