import { decorateMethodsOf, decoratorTypeOf, DecoratorTypes, Store } from "@tsed/core";
import { INJECTABLE_PROP } from "../constants/constants.js";
import { InjectablePropertyType } from "../domain/InjectablePropertyType.js";
/**
 * Attaches interceptor to method call and executes the before and after methods
 *
 * @param interceptor
 * @param options
 * @decorator
 */
export function Intercept(interceptor, options) {
    return (...args) => {
        const [target, propertyKey, descriptor] = args;
        const type = decoratorTypeOf(args);
        switch (type) {
            case DecoratorTypes.CLASS:
                decorateMethodsOf(target, Intercept(interceptor, options));
                break;
            case DecoratorTypes.METHOD:
                Store.from(target).merge(INJECTABLE_PROP, {
                    [propertyKey]: {
                        options,
                        propertyKey,
                        useType: interceptor,
                        bindingType: InjectablePropertyType.INTERCEPTOR
                    }
                });
                return descriptor;
        }
    };
}
//# sourceMappingURL=intercept.js.map