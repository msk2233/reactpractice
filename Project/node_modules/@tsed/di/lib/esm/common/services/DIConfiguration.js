import { getValue, proxyDelegation, setValue } from "@tsed/core";
export class DIConfiguration {
    default = new Map();
    map = new Map();
    constructor(initialProps = {}) {
        Object.entries({
            scopes: {},
            resolvers: [],
            imports: [],
            routes: [],
            logger: {},
            ...initialProps
        }).forEach(([key, value]) => {
            this.default.set(key, value);
        });
        return proxyDelegation(this, {
            ownKeys(target) {
                return [...target.default.keys(), ...target.map.keys()];
            }
        });
    }
    get version() {
        return this.get("version");
    }
    set version(v) {
        this.map.set("version", v);
    }
    get rootDir() {
        return this.get("rootDir");
    }
    set rootDir(value) {
        this.map.set("rootDir", value);
    }
    get env() {
        return this.map.get("env");
    }
    set env(value) {
        this.map.set("env", value);
    }
    get scopes() {
        return this.map.get("scopes");
    }
    set scopes(value) {
        this.map.set("scopes", value);
    }
    get resolvers() {
        return this.getRaw("resolvers");
    }
    set resolvers(resolvers) {
        this.map.set("resolvers", resolvers);
    }
    get imports() {
        return this.get("imports");
    }
    set imports(imports) {
        this.map.set("imports", imports);
    }
    get routes() {
        return this.get("routes");
    }
    set routes(routes) {
        this.map.set("routes", routes);
    }
    get logger() {
        return this.get("logger");
    }
    set logger(value) {
        const logger = { ...this.logger, ...value };
        this.map.set("logger", logger);
    }
    get debug() {
        return this.logger.level === "debug";
    }
    set debug(debug) {
        this.logger = { ...this.logger, level: debug ? "debug" : "info" };
    }
    /**
     *
     * @param callbackfn
     * @param thisArg
     */
    forEach(callbackfn, thisArg) {
        return new Set([...Array.from(this.default.keys()), ...Array.from(this.map.keys())]).forEach((key) => {
            callbackfn(this.getRaw(key), key, this.map);
        }, thisArg);
    }
    /**
     *
     * @param propertyKey
     * @param value
     */
    set(propertyKey, value) {
        if (typeof propertyKey === "string") {
            if (Reflect.has(this, propertyKey)) {
                // @ts-ignore
                this[propertyKey] = value;
            }
            else {
                this.setRaw(propertyKey, value);
            }
        }
        else {
            Object.entries(propertyKey).forEach(([key, value]) => {
                this.set(key, value);
            });
        }
        return this;
    }
    setRaw(propertyKey, value) {
        setValue(this.map, propertyKey, value);
        return this;
    }
    /**
     *
     * @param propertyKey
     * @param defaultValue
     * @returns {undefined|any}
     */
    get(propertyKey, defaultValue) {
        return this.getRaw(propertyKey, defaultValue);
    }
    /**
     *
     * @param value
     * @returns {any}
     */
    resolve(value) {
        return value.replace("${rootDir}", this.rootDir);
    }
    getRaw(propertyKey, defaultValue) {
        const value = getValue(this.map, propertyKey);
        if (value !== undefined) {
            return value;
        }
        return getValue(this.default, propertyKey, defaultValue);
    }
}
//# sourceMappingURL=DIConfiguration.js.map