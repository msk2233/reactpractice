import { DIContext, InjectorService } from "@tsed/di";
import { JsonMethodStore, JsonParameterStore, PipeMethods } from "@tsed/schema";
export type PlatformParamsScope<Context extends DIContext = DIContext> = {
    $ctx: Context;
} & Record<string, any>;
export type PlatformParamsCallback<Context extends DIContext = DIContext> = (scope: PlatformParamsScope) => Promise<any>;
/**
 * Platform Params abstraction layer.
 * @platform
 */
export declare class PlatformParams {
    protected injector: InjectorService;
    getPipes(param: JsonParameterStore): PipeMethods<any, any>[];
    /**
     * Return a handler with injectable parameters
     * @param handlerMetadata
     */
    compileHandler<Context extends DIContext = DIContext>({ propertyKey, token, handler }: {
        propertyKey?: string | symbol;
        token?: any;
        handler?: any;
    }): PlatformParamsCallback<Context>;
    compile<Context extends DIContext = DIContext>(entity: JsonMethodStore): PlatformParamsCallback<Context>;
    getArg<Context extends DIContext = DIContext>(scope: PlatformParamsScope, pipes: PipeMethods[], param: JsonParameterStore): Promise<any>;
}
