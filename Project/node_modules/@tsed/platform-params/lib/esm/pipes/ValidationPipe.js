import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable } from "@tsed/di";
import { deserialize } from "@tsed/json-mapper";
import { getJsonSchema } from "@tsed/schema";
import { ParamTypes } from "../domain/ParamTypes.js";
import { RequiredValidationError } from "../errors/RequiredValidationError.js";
function cast(value, metadata) {
    try {
        return deserialize(value, {
            type: metadata.type
        });
    }
    catch (er) {
        return value;
    }
}
let ValidationPipe = class ValidationPipe {
    validator;
    constructor(validators) {
        this.validator = validators[0];
    }
    coerceTypes(value, metadata) {
        if (value === undefined) {
            return value;
        }
        if (value === "null") {
            return null;
        }
        if (metadata.isArray) {
            return [].concat(value);
        }
        if (metadata.isPrimitive) {
            return cast(value, metadata);
        }
        return value;
    }
    skip(value, metadata) {
        return metadata.paramType === ParamTypes.PATH && !metadata.isPrimitive;
    }
    transform(value, metadata) {
        if (!this.validator) {
            this.checkIsRequired(value, metadata);
            return value;
        }
        // FIXME See if it's necessary ?
        if (this.skip(value, metadata)) {
            return value;
        }
        value = this.coerceTypes(value, metadata);
        this.checkIsRequired(value, metadata);
        if (value === undefined) {
            return value;
        }
        const schema = getJsonSchema(metadata, {
            customKeys: true
        });
        return this.validator.validate(value, {
            schema,
            type: metadata.isClass ? metadata.type : undefined,
            collectionType: metadata.collectionType
        });
    }
    checkIsRequired(value, metadata) {
        if (metadata.isRequired(value)) {
            throw RequiredValidationError.from(metadata);
        }
        return true;
    }
};
ValidationPipe = __decorate([
    Injectable({
        type: "validator"
    }),
    __param(0, Inject("validator:service")),
    __metadata("design:paramtypes", [Array])
], ValidationPipe);
export { ValidationPipe };
//# sourceMappingURL=ValidationPipe.js.map