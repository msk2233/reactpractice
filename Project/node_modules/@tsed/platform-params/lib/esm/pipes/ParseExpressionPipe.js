import { __decorate } from "tslib";
import { getValue } from "@tsed/core";
import { Injectable } from "@tsed/di";
import { ParamTypes } from "../domain/ParamTypes.js";
let ParseExpressionPipe = class ParseExpressionPipe {
    transform(scope, param) {
        const { paramType, type } = param;
        const value = getValue(scope, this.getKey(param));
        if ([ParamTypes.QUERY, ParamTypes.PATH].includes(paramType) && value === "" && type !== String) {
            return undefined;
        }
        return value;
    }
    getKey(param) {
        let { expression, paramType, dataPath } = param;
        paramType = paramType || param.parameter.get("in").toUpperCase();
        if (expression && paramType === ParamTypes.HEADER) {
            expression = String(expression).toLowerCase();
        }
        return [dataPath, expression].filter(Boolean).join(".");
    }
};
ParseExpressionPipe = __decorate([
    Injectable({
        priority: -1000
    })
], ParseExpressionPipe);
export { ParseExpressionPipe };
//# sourceMappingURL=ParseExpressionPipe.js.map