import { nameOf } from "@tsed/core";
import { BadRequest } from "@tsed/exceptions";
import { ValidationError } from "./ValidationError.js";
export class ParamValidationError extends BadRequest {
    name = "PARAM_VALIDATION_ERROR";
    dataPath;
    requestType;
    static from(metadata, origin = {}) {
        if (origin instanceof ValidationError || origin instanceof BadRequest) {
            const name = nameOf(metadata.paramType)
                .toLowerCase()
                .replace(/parse|params|filter/gi, "");
            const expression = metadata.expression;
            const dataPath = `${name}${expression ? "." + expression : ""}`;
            const message = `Bad request on parameter "request.${dataPath}".\n${origin.message}`.trim();
            const error = new ParamValidationError(message);
            error.dataPath = String(metadata.expression) || "";
            error.requestType = nameOf(metadata.paramType);
            error.origin = origin.origin || origin;
            if (error.origin?.errors) {
                error.origin?.errors.forEach((error) => {
                    error.requestPath = name;
                    error.dataPath = error.dataPath || (expression ? `.${expression}` : "");
                });
            }
            return error;
        }
        return origin;
    }
}
//# sourceMappingURL=ParamValidationError.js.map