import { Type } from "@tsed/core";
import { BaseContext, InjectorService } from "@tsed/di";
import { ResponseFilterKey } from "../domain/ResponseFiltersContainer";
import { ResponseFilterMethods } from "../interfaces/ResponseFilterMethods";
/**
 * @platform
 */
export declare class PlatformResponseFilter {
    protected types: Map<ResponseFilterKey, ResponseFilterMethods>;
    protected injector: InjectorService;
    protected responseFilters: Type<ResponseFilterMethods>[];
    protected additionalProperties: boolean;
    get contentTypes(): ResponseFilterKey[];
    $onInit(): void;
    getBestContentType(data: any, ctx: BaseContext): any;
    /**
     * Call filters to transform data
     * @param data
     * @param ctx
     */
    transform(data: unknown, ctx: BaseContext): any;
    /**
     * Serialize data before calling filters
     * @param data
     * @param ctx
     */
    serialize(data: unknown, ctx: BaseContext): Promise<unknown>;
    private getIncludes;
}
