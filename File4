import React from 'react';
import { useForm, SubmitHandler } from 'react-hook-form';

interface Step1Props {
  onNext: (data: Step1Data) => void;
  initialValues: Step1Data;
}

interface Step1Data {
  firstName: string;
  lastName: string;
}

const Step1: React.FC<Step1Props> = ({ onNext, initialValues }) => {
  const { register, handleSubmit, reset } = useForm<Step1Data>({
    defaultValues: initialValues,
  });

  // Reset the form values when the initial values change
  React.useEffect(() => {
    reset(initialValues);
  }, [initialValues, reset]);

  const onSubmit: SubmitHandler<Step1Data> = data => {
    onNext(data);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div>
        <label>First Name</label>
        <input {...register('firstName', { required: true })} />
      </div>
      <div>
        <label>Last Name</label>
        <input {...register('lastName', { required: true })} />
      </div>
      <button type="submit">Next</button>
    </form>
  );
};

export default Step1;
import React from 'react';
import { useForm, SubmitHandler } from 'react-hook-form';

interface Step2Props {
  onNext: (data: Step2Data) => void;
  onPrevious: () => void;
  initialValues: Step2Data;
}

interface Step2Data {
  email: string;
  phoneNumber: string;
}

const Step2: React.FC<Step2Props> = ({ onNext, onPrevious, initialValues }) => {
  const { register, handleSubmit, reset } = useForm<Step2Data>({
    defaultValues: initialValues,
  });

  // Reset the form values when the initial values change
  React.useEffect(() => {
    reset(initialValues);
  }, [initialValues, reset]);

  const onSubmit: SubmitHandler<Step2Data> = data => {
    onNext(data);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div>
        <label>Email</label>
        <input {...register('email', { required: true })} />
      </div>
      <div>
        <label>Phone Number</label>
        <input {...register('phoneNumber', { required: true })} />
      </div>
      <button type="button" onClick={onPrevious}>Previous</button>
      <button type="submit">Next</button>
    </form>
  );
};

export default Step2;
import React from 'react';
import { useForm, SubmitHandler } from 'react-hook-form';

interface Step3Props {
  onSubmit: (data: Step3Data) => void;
  onPrevious: () => void;
  initialValues: Step3Data;
}

interface Step3Data {
  address: string;
  city: string;
}

const Step3: React.FC<Step3Props> = ({ onSubmit, onPrevious, initialValues }) => {
  const { register, handleSubmit, reset } = useForm<Step3Data>({
    defaultValues: initialValues,
  });

  // Reset the form values when the initial values change
  React.useEffect(() => {
    reset(initialValues);
  }, [initialValues, reset]);

  const handleFinalSubmit: SubmitHandler<Step3Data> = data => {
    onSubmit(data);
  };

  return (
    <form onSubmit={handleSubmit(handleFinalSubmit)}>
      <div>
        <label>Address</label>
        <input {...register('address', { required: true })} />
      </div>
      <div>
        <label>City</label>
        <input {...register('city', { required: true })} />
      </div>
      <button type="button" onClick={onPrevious}>Previous</button>
      <button type="submit">Submit</button>
    </form>
  );
};

export default Step3;
import React, { useState } from 'react';
import Step1 from './Step1';
import Step2 from './Step2';
import Step3 from './Step3';

interface FormData {
  firstName?: string;
  lastName?: string;
  email?: string;
  phoneNumber?: string;
  address?: string;
  city?: string;
}

const MultiStepForm: React.FC = () => {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState<FormData>({});

  const handleNext = (data: any) => {
    setFormData(prev => ({ ...prev, ...data }));
    setStep(prev => prev + 1);
  };

  const handlePrevious = () => {
    setStep(prev => prev - 1);
  };

  const handleFinalSubmit = (data: any) => {
    const finalData = { ...formData, ...data };
    localStorage.setItem('formData', JSON.stringify(finalData));
    alert('Form Submitted!');
  };

  return (
    <div>
      {step === 1 && <Step1 onNext={handleNext} initialValues={formData} />}
      {step === 2 && <Step2 onNext={handleNext} onPrevious={handlePrevious} initialValues={formData} />}
      {step === 3 && <Step3 onSubmit={handleFinalSubmit} onPrevious={handlePrevious} initialValues={formData} />}
    </div>
  );
};

export default MultiStepForm;
