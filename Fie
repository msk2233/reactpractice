Here is the app without MUI and using only React Hook Form and TypeScript:

_schema/index.ts_
```
import { object, string } from 'yup';

interface BasicDetails {
  name: string;
  email: string;
}

interface EducationDetails {
  degree: string;
  university: string;
}

interface Preferences {
  interests: string;
}

const schema = {
  step1: object().shape({
    name: string().required('Name is required'),
    email: string().email('Invalid email').required('Email is required'),
  }),
  step2: object().shape({
    degree: string().required('Degree is required'),
    university: string().required('University is required'),
  }),
  step3: object().shape({
    interests: string().required('Interests are required'),
  }),
};

export default schema;
```
_components/BasicDetails.tsx_
```
import { useForm } from 'react-hook-form';
import { schema } from '../schema';

const BasicDetails = ({ onNext }) => {
  const { register, handleSubmit, errors } = useForm({
    schema: schema.step1,
  });

  return (
    <form onSubmit={handleSubmit(onNext)}>
      <input
        type="text"
        {...register('name')}
        placeholder="Name"
        error={errors.name ? true : false}
      />
      <input
        type="email"
        {...register('email')}
        placeholder="Email"
        error={errors.email ? true : false}
      />
      <button type="submit">Next</button>
    </form>
  );
};

export default BasicDetails;
```
_components/EducationDetails.tsx_
```
import { useForm } from 'react-hook-form';
import { schema } from '../schema';

const EducationDetails = ({ onNext }) => {
  const { register, handleSubmit, errors } = useForm({
    schema: schema.step2,
  });

  return (
    <form onSubmit={handleSubmit(onNext)}>
      <input
        type="text"
        {...register('degree')}
        placeholder="Degree"
        error={errors.degree ? true : false}
      />
      <input
        type="text"
        {...register('university')}
        placeholder="University"
        error={errors.university ? true : false}
      />
      <button type="submit">Next</button>
    </form>
  );
};

export default EducationDetails;
```
_components/Preferences.tsx_
```
import { useForm } from 'react-hook-form';
import { schema } from '../schema';

const Preferences = ({ onNext }) => {
  const { register, handleSubmit, errors } = useForm({
    schema: schema.step3,
  });

  return (
    <form onSubmit={handleSubmit(onNext)}>
      <input
        type="text"
        {...register('interests')}
        placeholder="Interests"
        error={errors.interests ? true : false}
      />
      <button type="submit">Submit</button>
    </form>
  );
};

export default Preferences;
```
_app.tsx_
```
import React, { useState } from 'react';
import { BasicDetails } from './components/BasicDetails';
import { EducationDetails } from './components/EducationDetails';
import { Preferences } from './components/Preferences';

const App = () => {
  const [currentStep, setCurrentStep] = useState(1);

  const handleNext = () => {
    setCurrentStep(currentStep + 1);
  };

  return (
    <div>
      {currentStep === 1 && <BasicDetails onNext={handleNext} />}
      {currentStep === 2 && <EducationDetails onNext={handleNext} />}
      {currentStep === 3 && <Preferences />}
    </div>
  );
};

export default App;
```
This app uses React Hook Form to handle the form validation and submission, and TypeScript to define the schema and interfaces for the form data.

Please note that this is just a basic example, and you will likely need to add additional functionality and error handling to your application.
