Here is the whole code for the multistep form with validation, including the schema, components, and app files:

_schema/index.ts_
```
import * as Yup from 'yup';

interface BasicDetails {
  name: string;
  email: string;
}

interface EducationDetails {
  degree: string;
  university: string;
}

interface Preferences {
  interests: string;
}

const schema: {
  step1: Yup.SchemaOf<BasicDetails>;
  step2: Yup.SchemaOf<EducationDetails>;
  step3: Yup.SchemaOf<Preferences>;
} = {
  step1: Yup.object().shape({
    name: Yup.string().required('Name is required'),
    email: Yup.string().email('Invalid email').required('Email is required'),
  }),
  step2: Yup.object().shape({
    degree: Yup.string().required('Degree is required'),
    university: Yup.string().required('University is required'),
  }),
  step3: Yup.object().shape({
    interests: Yup.string().required('Interests are required'),
  }),
};

export default schema;
```
_components/BasicDetails.tsx_
```
import { useForm } from 'react-hook-form';
import { schema } from '../schema';

const BasicDetails = ({ onNext }) => {
  const { register, handleSubmit, errors } = useForm({
    schema: schema.step1,
  });

  return (
    <form onSubmit={handleSubmit(onNext)}>
      <TextField
        label="Name"
        {...register('name')}
        error={errors.name ? true : false}
      />
      <TextField
        label="Email"
        {...register('email')}
        error={errors.email ? true : false}
      />
      <Button type="submit">Next</Button>
    </form>
  );
};

export default BasicDetails;
```
_components/EducationDetails.tsx_
```
import { useForm } from 'react-hook-form';
import { schema } from '../schema';

const EducationDetails = ({ onNext }) => {
  const { register, handleSubmit, errors } = useForm({
    schema: schema.step2,
  });

  return (
    <form onSubmit={handleSubmit(onNext)}>
      <TextField
        label="Degree"
        {...register('degree')}
        error={errors.degree ? true : false}
      />
      <TextField
        label="University"
        {...register('university')}
        error={errors.university ? true : false}
      />
      <Button type="submit">Next</Button>
    </form>
  );
};

export default EducationDetails;
```
_components/Preferences.tsx_
```
import { useForm } from 'react-hook-form';
import { schema } from '../schema';

const Preferences = ({ onNext }) => {
  const { register, handleSubmit, errors } = useForm({
    schema: schema.step3,
  });

  return (
    <form onSubmit={handleSubmit(onNext)}>
      <TextField
        label="Interests"
        {...register('interests')}
        error={errors.interests ? true : false}
      />
      <Button type="submit">Submit</Button>
    </form>
  );
};

export default Preferences;
```
_app.tsx_
```
import React, { useState } from 'react';
import { BasicDetails } from './components/BasicDetails';
import { EducationDetails } from './components/EducationDetails';
import { Preferences } from './components/Preferences';

const App = () => {
  const [currentStep, setCurrentStep] = useState(1);

  const handleNext = () => {
    setCurrentStep(currentStep + 1);
  };

  return (
    <div>
      {currentStep === 1 && <BasicDetails onNext={handleNext} />}
      {currentStep === 2 && <EducationDetails onNext={handleNext} />}
      {currentStep === 3 && <Preferences />}
    </div>
  );
};

export default App;
```
_index.tsx_
```
import React from 'react';
import ReactDOM from 'react-dom';
import App from './app';

ReactDOM.render(<App />, document.getElementById('root'));
```
This code defines the schema for each step of the form, and uses the `react-hook-form` library to handle the form validation and submission. The `app.tsx` file contains the main application component, which renders each step of the form. The `index.tsx` file is the entry point for the application.

Please note that this is just a basic example, and you will likely need to add additional functionality and error handling to your application.
