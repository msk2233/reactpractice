import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface AuthState {
  token: string | null;
  isAuthenticated: boolean;
}

const initialState: AuthState = {
  token: null,
  isAuthenticated: false,
};

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    login: (state, action: PayloadAction<string>) => {
      state.token = action.payload;
      state.isAuthenticated = true;
    },
    logout: (state) => {
      state.token = null;
      state.isAuthenticated = false;
    },
  },
});

export const { login, logout } = authSlice.actions;

export default authSlice.reducer;
STORE/INDEX.TS
import { configureStore } from '@reduxjs/toolkit';
import authReducer from './authSlice';

const store = configureStore({
  reducer: {
    auth: authReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

export default store;
SRC/INDEX.TSX
import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import { BrowserRouter as Router } from 'react-router-dom';
import store from './store';
import Application from './Application';

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(
  <Provider store={store}>
    <Router>
      <Application />
    </Router>
  </Provider>
);
SRC/AUTH/AUTHPROVIDER
import React, { createContext, useContext, ReactNode } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from '../store';
import { login, logout } from '../store/authSlice';

interface AuthContextProps {
  isAuthenticated: boolean;
  login: (token: string) => void;
  logout: () => void;
}

const AuthContext = createContext<AuthContextProps | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const dispatch = useDispatch();
  const isAuthenticated = useSelector((state: RootState) => state.auth.isAuthenticated);

  const loginHandler = (token: string) => {
    dispatch(login(token));
  };

  const logoutHandler = () => {
    dispatch(logout());
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, login: loginHandler, logout: logoutHandler }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
PROTECTEDROUTE
import React from 'react';
import { Route, Redirect } from 'react-router-dom';
import { useAuth } from '../auth/AuthProvider';

interface ProtectedRouteProps {
  component: React.ComponentType;
  path: string;
  exact?: boolean;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ component: Component, ...rest }) => {
  const { isAuthenticated } = useAuth();

  return (
    <Route
      {...rest}
      render={(props) =>
        isAuthenticated ? (
          <Component {...props} />
        ) : (
          <Redirect to="/login" />
        )
      }
    />
  );
};

export default ProtectedRoute;
import React from "react";
import { Routes, Route } from "react-router-dom";
import Reg from './Pages/Register';
import Login from './Pages/Login';
import Crud from './Pages/Crud';
import Home from './Pages/Home';
import Challenges from './Pages/challenges';
import Challenge1 from "./challenges/challenge1";
import Challenge2 from "./challenges/challenge2";
import Challenge3 from "./challenges/challenge3";
import Challenge4 from "./challenges/challenge4";
import Challenge5 from "./challenges/challenge5";
import Challenge6 from "./challenges/challenge6";
import Challenge7 from "./challenges/challenge7";
import Challenge8 from "./challenges/challenge8";
import { Employee } from "./challenges/challenge8";
import { Ids } from "./challenges/challenge8";
import Challenge9 from "./challenges/challenge9";
import { AuthProvider } from "./auth/AuthProvider";
import ProtectedRoute from "./components/ProtectedRoute";

const Application: React.FC = () => {
  return (
    <AuthProvider>
      <Routes>
        <Route path="/register" element={<Reg />} />
        <Route path="/" element={<Reg />} />
        <Route path="/login" element={<Login />} />
        <ProtectedRoute path="/Home" element={<Home />} />
        <ProtectedRoute path="/Home/crud" element={<Crud />} />
        <ProtectedRoute path="/Home/challenges" element={<Challenges />} />
        <ProtectedRoute path="/Home/challenges/challenge1" element={<Challenge1 />} />
        <ProtectedRoute path="/Home/challenges/challenge2" element={<Challenge2 />} />
        <ProtectedRoute path="/Home/challenges/challenge3" element={<Challenge3 />} />
        <ProtectedRoute path="/Home/challenges/challenge4" element={<Challenge4 />} />
        <ProtectedRoute path="/Home/challenges/challenge5" element={<Challenge5 />} />
        <ProtectedRoute path="/Home/challenges/challenge6" element={<Challenge6 />} />
        <ProtectedRoute path="/Home/challenges/challenge7" element={<Challenge7 />} />
        <ProtectedRoute path="/Home/challenges/challenge8" element={<Challenge8 />} />
        <ProtectedRoute path="/Home/challenges/challenge8/:name" element={<Employee />} />
        <ProtectedRoute path="/Home/challenges/challenge8/Idss/:id" element={<Ids />} />
        <ProtectedRoute path="/Home/challenges/challenge9" element={<Challenge9 />} />
      </Routes>
    </AuthProvider>
  );
};

export default Application;
import React, { useState } from 'react';
import axios from 'axios';
import { useAuth } from '../auth/AuthProvider';
import { useDispatch } from 'react-redux';
import { login } from '../store/authSlice';

const Login: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const { login } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:5000/api/users/login', { email, password });
      const { token } = response.data;
      login(token);
    } catch (error) {
      console.error('Login failed:', error);
    }
  };

  return (
    <div>
      <h2>Login</h2>
      <form onSubmit={handleSubmit}>
        <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} required />
        <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} required />
        <button type="submit">Login</button>
      </form>
    </div>
  );
};

export default Login;
