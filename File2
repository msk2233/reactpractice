To maintain the state of a multi-step form in React, you can use the `useState` hook in the parent component (App.tsx) to store the form data. Then, you can pass the state and a callback function to each step component to update the state.

Here's an example of how you can do this:
```
// App.tsx
import React, { useState } from 'react';
import BasicDetails from './BasicDetails';
import EducationDetails from './EducationDetails';
import Preferences from './Preferences';

const App = () => {
  const [formData, setFormData] = useState({
    basicDetails: {},
    educationDetails: {},
    preferences: {},
  });

  const handleNext = (data) => {
    setFormData((prevData) => ({ ...prevData, ...data }));
  };

  const handleBack = () => {
    // implement logic to go back to previous step
  };

  return (
    <div>
      {currentStep === 1 && (
        <BasicDetails
          formData={formData.basicDetails}
          handleNext={handleNext}
          handleBack={handleBack}
        />
      )}
      {currentStep === 2 && (
        <EducationDetails
          formData={formData.educationDetails}
          handleNext={handleNext}
          handleBack={handleBack}
        />
      )}
      {currentStep === 3 && (
        <Preferences
          formData={formData.preferences}
          handleNext={handleNext}
          handleBack={handleBack}
        />
      )}
    </div>
  );
};

export default App;
```
In each step component, you can access the form data and update it using the `handleNext` callback function. For example:
```
// BasicDetails.tsx
import React from 'react';

const BasicDetails = ({ formData, handleNext, handleBack }) => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');

  const handleSubmit = () => {
    handleNext({ basicDetails: { name, email } });
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" value={name} onChange={(e) => setName(e.target.value)} />
      <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
      <button type="submit">Next</button>
      <button type="button" onClick={handleBack}>Back</button>
    </form>
  );
};

export default BasicDetails;
```
Similarly, you can implement the `EducationDetails` and `Preferences` components.

To submit the form data and store it for the previous button, you can add a submit handler in the `App` component that collects the form data from each step and submits it to the server or stores it in local storage. For example:
```
// App.tsx
const handleSubmit = () => {
  const formData = {
    basicDetails: formData.basicDetails,
    educationDetails: formData.educationDetails,
    preferences: formData.preferences,
  };
  // submit form data to server or store it in local storage
};

return (
  <div>
    {/* form steps */}
    <button type="submit" onClick={handleSubmit}>Submit</button>
  </div>
);
```
I hope this helps! Let me know if you have any further questions.
